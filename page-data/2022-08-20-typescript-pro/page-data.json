{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2022-08-20-typescript-pro/",
    "result": {"data":{"site":{"siteMetadata":{"title":"ここにかく"}},"markdownRemark":{"id":"b74b7edf-70ad-5b7e-ab5b-e02e10bf6ca0","excerpt":"「プロを目指す人のための TypeScript 入門　安全なコードの書き方から高度な型の使い方まで」、通称ブルーベリー本を読んだので読書メモを書いておく。 https://www.amazon.co.jp/dp/B09Y527YPV 読者である私自身の技術レベルは以下の通り。 202…","html":"<p>「プロを目指す人のための TypeScript 入門　安全なコードの書き方から高度な型の使い方まで」、通称ブルーベリー本を読んだので読書メモを書いておく。</p>\n<p><a href=\"https://www.amazon.co.jp/dp/B09Y527YPV\">https://www.amazon.co.jp/dp/B09Y527YPV</a></p>\n<p>読者である私自身の技術レベルは以下の通り。</p>\n<ul>\n<li>2020年からプログラミングを始めたので、最近の垢抜けた TypeScript/JavaScript しか知らない</li>\n<li>2年くらい仕事で React/Node.js を使っており TypeScript を書いている</li>\n<li>型の表現に自信がないので、自分ではあまり複雑な型を書かない</li>\n</ul>\n<p>入門とはいえ分厚い本なので全てを紹介することはできず、自分の印象に残った箇所に止める。</p>\n<h2 id=\"この本の位置付け\" style=\"position:relative;\"><a href=\"#%E3%81%93%E3%81%AE%E6%9C%AC%E3%81%AE%E4%BD%8D%E7%BD%AE%E4%BB%98%E3%81%91\" aria-label=\"この本の位置付け permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>この本の位置付け</h2>\n<p>TypeScript（や React, Node.js）で実践的なアプリケーションを作ろう！という書籍<strong>ではなく</strong>、その仕様や使い方を詳細に紹介する書籍。</p>\n<p>基本的な文法の解説もされているが、プログラミング初学者が読む本ではないと思う。というのも、この本が提供する「TypeScript を使って型安全なプログラムを書くにはどうしたらいいか」という情報そのものが初学者にとって興味が湧かないと考えられるためだ（初学者であっても型安全の恩恵は受けるに違いないのだが）。</p>\n<p>一方で、仕事や趣味である程度 TypeScript を書いており「何となく動いてるけどこれ裏側ではどうなってるのかな」と気になっている人、「TypeScript でより型安全なプログラムを書きたい」と思ってる人、もしくは JavaScript を書いており「TypeScript ってどういう言語なのか知りたい」という人に非常に役に立つ本であることは間違いない。</p>\n<p>JavaScript を読み書きしたことがない人はまず <a href=\"https://jsprimer.net/\">JavaScript Primer</a> などを読んでからこの本を読んだ方が良い。</p>\n<p>6章を中心に TypeScript の特徴である型システムで高度な型を表現する方法を紹介している。「プロを目指す人のための〜」というタイトルにふさわしい。</p>\n<h2 id=\"第1章-イントロダクション\" style=\"position:relative;\"><a href=\"#%E7%AC%AC1%E7%AB%A0-%E3%82%A4%E3%83%B3%E3%83%88%E3%83%AD%E3%83%80%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3\" aria-label=\"第1章 イントロダクション permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第1章: イントロダクション</h2>\n<p>TypeScript の特徴や歴史の紹介、開発環境の整備。</p>\n<p>TypeScript の型システムを利用することで、型チェックによるコンパイルエラー、ソースコードのドキュメント化、エディタや IDE による入力補完など様々なメリットを享受することができる。</p>\n<p>TypeScript コンパイラは型チェックによりソースコードの文面から静的にプログラマの型注釈との矛盾をチェックし、JavaScript へトランスパイルする。静的チェックによりエディタや IDE での開発中に簡単にミスを発見し修正することができる。</p>\n<p>JavaScript には静的な型チェックはなく、ランタイムの挙動は型情報に依存しない。JavaScript へのトランスパイルでは基本的に型情報を取り除く（後は一部の新しい構文を古い構文に変換する）だけで、プログラムの挙動は型によって変わることはない。つまり、ある程度 JavaScript の経験があるプログラマーにとっては型の扱いを覚えるだけでよいため非常に使いやすい言語となっている。</p>\n<p>Node.js をインストールして簡単な環境設定（tsconfig）をする箇所については、tsconfig 自体が膨大なオプションがあり初学者にわかりづらい中で簡単な説明と後で詳しく解説する箇所へのリファレンスがついていて素晴らしかった。</p>\n<h2 id=\"第2章--第5章\" style=\"position:relative;\"><a href=\"#%E7%AC%AC2%E7%AB%A0--%E7%AC%AC5%E7%AB%A0\" aria-label=\"第2章  第5章 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第2章 ~ 第5章</h2>\n<ul>\n<li>第2章: 基本的な文法・基本的な型</li>\n<li>第3章: オブジェクトの基本とオブジェクトの型</li>\n<li>第4章: TypeScript の関数</li>\n<li>第5章: TypeScript のクラス</li>\n</ul>\n<p>TypeScript の文法や型、オブジェクト、関数、クラスなど基本的な知識に関する章。</p>\n<p>既に仕事や趣味で TypeScript を書いていればこれらの章に書いてあることは基本的に日常のプログラミングで使っているので、退屈な章に見えるかもしれない。しかし、新たな再発見があるかもしれないし第6章の高度な型の前提となる知識でもあるので読み飛ばさず、ささっと読んでみることをおすすめしたい。</p>\n<p>例えば自分の場合、第3章の computed property name （オブジェクトのプロパティ名を動的に決めるための構文）については全く知らなかった。他にもこんな機能があったのか！という記述がそこかしこにあり、自分の知識の欠けていた箇所を見つけ出すことができた。</p>\n<p>「4.2.3 返り値の型注釈は省略すべきか」という項も面白かった。TypeScript では型推論によって関数の返り値を調べており、もし返り値の型が代入先と合わない（例えば <code class=\"language-text\">number[]</code> を返さなければいけないのに何も返してなかった）時には当然コンパイルエラーを出してくれる。しかし、関数の返り値の型注釈を書いていれば関数内部でコンパイルエラーを出すことができるのに対し、書かない場合は関数を呼び出して結果を使う側でコンパイルエラーが出る。基本的には関数の返り値の型注釈を書く方がエラーを発見しやすくなるので望ましいだろう。</p>\n<p>このように、TypeScript における型注釈には「開発者による真実の源としての型の表明」という意図を表している。つまり、型を明示しないということは呼び出し側が型や実行時の動作に責任を持つことを意味する。型注釈や型定義を書くときはプログラムの構造における真実の源をどこに置くべきか考えながら書くのが良さそうだ。</p>\n<p>型以外にも式と文の違いなど、普段プログラミングをする上ではあまり意識しない（？）ような前提となる事柄も丹念に説明されており、「プロを目指す人のための〜」というタイトルを思い起こさせる。「プロ」という言葉をどう捉えるかはその人次第だが、自分は「基礎から応用まで幅広い知識を持ち状況に応じて問題を解決するための最適な選択肢を導き出せる人」だと考えているので、この本に垣間見える用語の正確さへのこだわりであったり基礎的な部分を疎かにしない姿勢にはプロを感じる。</p>\n<p>プログラマー歴2年かそこらの自分が偉そうに語れる話でもないのだが…</p>\n<h2 id=\"第6章-高度な型\" style=\"position:relative;\"><a href=\"#%E7%AC%AC6%E7%AB%A0-%E9%AB%98%E5%BA%A6%E3%81%AA%E5%9E%8B\" aria-label=\"第6章 高度な型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第6章: 高度な型</h2>\n<p>この本で最も重要な章かもしれない。ユニオン型とインターセクション型、リテラル型、代数的データ型などの解説。</p>\n<p>関数のオプショナルチェイニング（<code class=\"language-text\">getTimeFunc?.()</code> のような書き方）が紹介されてたのだが、これできるの初めて知った（変数でしか使ったことなかった）。</p>\n<p><code class=\"language-text\">keyof</code> や <code class=\"language-text\">typeof</code> を使った型レベルの計算はなかなか面白い。TypeScript 以外の言語ではあまり見たことない気がする（あったらすみません）。これによって型の表現力が大きく高まっているように見える。</p>\n<p>オブジェクトにリテラル型の tag プロパティを用意して扱うデータの形と可能性を型として正確に表現する、そしてそれを使って if や switch 文で型の絞り込みを行うという方法は便利そうなので覚えておきたい。</p>\n<p>型アサーション（<code class=\"language-text\">as</code> で型を上書きするやつ）はランタイムエラーを引き起こす可能性があるのでなるべく使わない。使う場合は不正確な型を正しく直すために使うべきである（つまり、TypeScript の型推論を補助するために使うべきで刃向かうために使うべきではない）。</p>\n<p><code class=\"language-text\">any</code> 型は型安全性を破壊するので避けるべき。型チェックが行われないのでコンパイルで発見できたはずのエラーもランタイムエラーとなり、 TypeScript を使う意味が薄れてしまう。依存先が JavaScript から TypeScript に移行中で any を使っていたのが型を付けるようになりその型を使わないとコンパイルで引っかかるという落とし穴もあるので迷惑な存在だが、これによって TypeScript への移行が早まったという背景もあると思うので必要悪的な存在なのかもしれない。</p>\n<p>ユーザー定義型ガードや型アサーションも同様だが、TypeScript が提供する型安全性を犠牲にしてプログラマの責任とすることを十分に意識すべき。</p>\n<h2 id=\"第7章-typescript-のモジュールシステム\" style=\"position:relative;\"><a href=\"#%E7%AC%AC7%E7%AB%A0-typescript-%E3%81%AE%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0\" aria-label=\"第7章 typescript のモジュールシステム permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第7章: TypeScript のモジュールシステム</h2>\n<p>Import / export でデータや関数を受け渡す方法について。</p>\n<p>簡単な変数や関数、型の export から始めて、モジュール間でデータや関数を受け渡す方法が解説されている。</p>\n<p>Default export 使わない理由（明確な名前がないので補完が働かない）というのは確かになと思った（私も基本的に使わないのだが）。</p>\n<p>スクリプトとモジュールの違い、ES Modules と CommonJS Modules の違いなど、普段意識しないところまで書かれていてありがたい。特に ES Modules は最近会社のプロジェクトの依存関係を更新していて詰まることが多かったので個人的にタイムリーな話題だった。具体的には今まで CommonJS だったモジュールがあるバージョンから ESM only になるとか。</p>\n<h2 id=\"第8章-非同期処理\" style=\"position:relative;\"><a href=\"#%E7%AC%AC8%E7%AB%A0-%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86\" aria-label=\"第8章 非同期処理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第8章: 非同期処理</h2>\n<p>この章については JavaScript における非同期処理（通信など時間がかかったり、ファイルへの保存など I/O を伴うため即時に完了できない処理）を基本から説明している。</p>\n<p>Promise の理解があやしい人は <a href=\"https://azu.github.io/promises-book/\">JavaScript Promise の本</a> もあわせて読むのがおすすめ。</p>\n<p>TypeScript 特有の注意点として挙げられていたのが、 Promise 失敗時のコールバック関数に渡される引数 error の型が <code class=\"language-text\">any</code> となってしまい型システム上はどのようなエラーが生じるか明らかでないという仕様がある。なんで unknown じゃなくて any なんだろうと疑問だが、歴史的経緯によるものだそうだ。</p>\n<p>何でも入るという点では <code class=\"language-text\">any</code> と同じだができることが限られる（プロパティアクセスができなくなる） <code class=\"language-text\">unknown</code> 型を注釈に入れることで少しだけ安全になる。これも意識したことなかったけど型安全性を意識するなら可能な限り any を使うべきではないので覚えておきたい。</p>\n<h2 id=\"第9章-typescript-のコンパイラオプション\" style=\"position:relative;\"><a href=\"#%E7%AC%AC9%E7%AB%A0-typescript-%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3\" aria-label=\"第9章 typescript のコンパイラオプション permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第9章: TypeScript のコンパイラオプション</h2>\n<p>TypeScript のコンパイル時の挙動を制御するオプション（tsconfig.json）について。</p>\n<p>環境構築する際に package.json や tsconfig.json を書くのだが、基本的に他のプロジェクトやよくある設定のやつをコピペしてドキュメントを軽く読むだけであまり幅広いオプションを利用してこなかった。strict を絶対 true にするくらい。</p>\n<p>TypeScript の型チェックは後方互換性を重視しており、厳しいオプションは明示的に設定しなければ有効とならない。つまり、既存のプロジェクトからコピペすると（後方互換性を考えなくていいにも関わらず）古い書き方をそのまま使ってしまうので、コンパイラオプションが緩くなりがちになるなーと思った。</p>\n<p><code class=\"language-text\">noUncheckedIndexedAccess</code>（インデックスシグネチャを通じたプロパティアクセスで得られる値を常に <code class=\"language-text\">undefined</code> とのユニオン型にする）と <code class=\"language-text\">exactOptionalPropertyTypes</code> （オプショナルプロパティに明示的に <code class=\"language-text\">undefined</code> を代入することができなくなる）についても知らなかった。</p>\n<p>コンパイラオプションを羅列して解説するというよりは、基本的な有効にすべきオプションの挙動の説明とコンパイラオプションの立ち位置を。後から厳しくするのは難しいので最初から厳しくしておくというのは良さそう。実際、コンパイルエラーをちゃんと出してくれた方が結果的に速く開発が進むため。</p>\n<h2 id=\"感想\" style=\"position:relative;\"><a href=\"#%E6%84%9F%E6%83%B3\" aria-label=\"感想 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>感想</h2>\n<p>この本を読んで TypeScript の型との向き合い方が変わったかもしれない。</p>\n<p>今まではプロジェクトの既存のコンパイラオプションや型定義、開発メンバーで定めたガイドラインに沿ってプログラムを書いていたが、積極的に新情報を調べたりより型安全なプログラムを書くための工夫を探求していこうと思った。</p>","tableOfContents":"<ul>\n<li><a href=\"#%E3%81%93%E3%81%AE%E6%9C%AC%E3%81%AE%E4%BD%8D%E7%BD%AE%E4%BB%98%E3%81%91\">この本の位置付け</a></li>\n<li><a href=\"#%E7%AC%AC1%E7%AB%A0-%E3%82%A4%E3%83%B3%E3%83%88%E3%83%AD%E3%83%80%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3\">第1章: イントロダクション</a></li>\n<li><a href=\"#%E7%AC%AC2%E7%AB%A0--%E7%AC%AC5%E7%AB%A0\">第2章 ~ 第5章</a></li>\n<li><a href=\"#%E7%AC%AC6%E7%AB%A0-%E9%AB%98%E5%BA%A6%E3%81%AA%E5%9E%8B\">第6章: 高度な型</a></li>\n<li><a href=\"#%E7%AC%AC7%E7%AB%A0-typescript-%E3%81%AE%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0\">第7章: TypeScript のモジュールシステム</a></li>\n<li><a href=\"#%E7%AC%AC8%E7%AB%A0-%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86\">第8章: 非同期処理</a></li>\n<li><a href=\"#%E7%AC%AC9%E7%AB%A0-typescript-%E3%81%AE%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3\">第9章: TypeScript のコンパイラオプション</a></li>\n<li><a href=\"#%E6%84%9F%E6%83%B3\">感想</a></li>\n</ul>","frontmatter":{"title":"プロを目指す人のための TypeScript 入門を読んだ話","date":"August 20, 2022","description":null}},"previous":{"fields":{"slug":"/2022-08-12-accounting-data/"},"frontmatter":{"title":"PyCPA: 会計データ基盤の話"}},"next":null},"pageContext":{"id":"b74b7edf-70ad-5b7e-ab5b-e02e10bf6ca0","previousPostId":"32c0d338-4416-5ca7-9cb9-d4fe8babcf9b","nextPostId":null}},
    "staticQueryHashes": ["1445466728","2841359383"]}