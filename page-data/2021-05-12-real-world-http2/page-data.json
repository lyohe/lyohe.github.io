{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2021-05-12-real-world-http2/",
    "result": {"data":{"site":{"siteMetadata":{"title":"ここにかく"}},"markdownRemark":{"id":"46640fd5-5808-5c66-94cf-ed9e064d405e","excerpt":"5月の連休中に Real World HTTP（第2版）を通読したので、簡単に感想をメモしておく。 https://www.amazon.co.jp/dp/4873119030 なお、この本の要約版が無料で公開されているので、買う前にまずはこちらを読むのがいいかもしれない。 https://www.oreilly.co…","html":"<p>5月の連休中に Real World HTTP（第2版）を通読したので、簡単に感想をメモしておく。</p>\n<p><a href=\"https://www.amazon.co.jp/dp/4873119030\">https://www.amazon.co.jp/dp/4873119030</a></p>\n<p>なお、この本の要約版が無料で公開されているので、買う前にまずはこちらを読むのがいいかもしれない。</p>\n<p><a href=\"https://www.oreilly.co.jp/books/9784873118789/\">https://www.oreilly.co.jp/books/9784873118789/</a></p>\n<h2>背景</h2>\n<p>なぜこの本を読むことにしたかというと、自分自身がプログラミング初心者であり、仕事や趣味でプログラムを書いていて HTTP に関する知識が不足している（…というか、あらゆる点が全部不足してるんだけど）と感じることが多かったからだ。</p>\n<p>プログラミングしていると、言語の標準ライブラリやそれをラップしたパッケージ等で気軽に HTTP 通信を扱うことがよくある。そうすると自分で書くプログラムは少なくて済むのだが、実際にどういう仕組みで動いているのかが分からないので問題が起きたときにどこを調べればいいか分からなくなってしまう。あと単純にどう動いてるかの概要が自分で分かってないと気持ち悪い。</p>\n<p>インターネットを通じて何かを提供するためのプログラムを書いてお金をもらう仕事をしていく以上は HTTP の勉強を避けては通れないと思ったし、連休何もすることがなかったので、時間をかけて読んでみることにした。</p>\n<h2>書籍の概要</h2>\n<p>本書を一言で表すと「HTTP の歴史書」と言えると思う。</p>\n<p>1ページ目の「まえがき」にはこうある。</p>\n<blockquote>\n<p>本書では、変化が大きくない領域である、HTTP（Hypertext Transfer Protocol）というウェブの転送用のプロトコルにフォーカスして紹介します。CGIとウェブアプリケーションサーバー、または最近でてきたサーバーレスアーキテクチャなど、ウェブサービスの裏で実装に使われる言語や仕組みはここ20年で大きく移り変わりましたが、実際にブラウザとサーバーの通信に関わる部分のコンセプトは20年近く、あまり変わっていません。コンピュータ業界は、日進月歩で新しい技術などが出続けるため、学び続けないといけないとよく言われます。それは半分正しくて半分間違っています。コンピュータサイエンスにあたるような内容、業界標準のプロトコル、テストしやすく見通しの良いコードの書き方、アルゴリズム、データベースなどは、一度学んでも無駄になることはありません。</p>\n</blockquote>\n<p>HTTP は「送信側（クライアント）」と「受信側（サーバー）」の両方がルールに従ってメッセージをやり取りする仕組みであり、この基本は誕生以来変わっていない。しかし一方で、ウェブの発展に伴って主なクライアントであるブラウザに様々な機能が追加されたり、それが仕様として標準化されたりしてきた。</p>\n<p>最新の仕様を読むと巨大なプロトコルだが、歴史を辿っていくと最初は特定の課題を解決するためのシンプルなプロトタイプから始まり、それぞれの段階（HTTP/0.9 や 1.0、2など…）で状況に応じて現実のユースケースに対応するための改善がされていったという経緯があることが分かる。</p>\n<p>その経緯を実際に手元で試しながら体系的に学ぶことで、新しい技術であっても何からどのように発展しているのかを知ることができ理解の促進に繋がる。ここに歴史を学ぶ意義がある。</p>\n<p>原典といえる RFC への参照もあるので、気になった仕様をいくらでも深堀りできる。とても分厚い（約450ページ）本なので内容を全て覚えることは不可能だが、一度通読してどこに何が書いてあるか何となく把握できれば困ったことが起きる度に辞書的に引けて非常に便利になると思う。</p>\n<p>そのため、思い立ったらすぐにめくれる紙媒体で買うのをおすすめしたい。</p>\n<h2>章ごとの大まかな構成と一言感想</h2>\n<h3>第1章〜第2章</h3>\n<p>HTTP の先祖といえる電子メールやニュースグループから始まり、メソッドとパス、ヘッダー、ボディ、ステータス等の HTTP の基本概念やコンテントネゴシエーション、クッキー、セッション、キャッシュなどブラウザの裏側を支える仕組みを説明する。</p>\n<p>今まで「何となくこういうものかな」と考えていた技術が体系的に整理されており、それぞれの関係性や複数の技術や機能の組み合わせでどのようなユースケースが実現されているかが分かりやすく解説されていて面白かった。</p>\n<h3>第3章</h3>\n<p>第1章〜第2章の内容を簡単におさらいしながらそれを実現する HTTP クライアントを Go 言語で実装する。</p>\n<p>私はここで初めて Go 言語に触れたのだが、文法がシンプルで読みやすくて驚いた。仕事で使うレベルにするには修行が必要だろうが、読んで何をしているか把握するだけなら C や JavaScript 、または似たような言語を書いたことがあれば困らないと思う。</p>\n<h3>第4章〜第5章</h3>\n<p>主に HTTP/1.1 時代の新機能を紹介する。</p>\n<p>Keep-Alive の仕組みや TLS の仕組み（鍵交換や通信手順によって何を守るか）、追加されたメソッド（CONNECT など）、さらには HTTP/1.1 時代に用途として追加されたファイルのダウンロード、XMLHttpRequest、ウェブサイト間の共通認証認可プラットフォーム（SAML や OAuth、OpenID など）がどのように実現されているかを解説する。</p>\n<p>個人的に面白かったのが XMLHttpRequest の名前の由来だった。以前から変な名前だなぁとは思っていた（XML 要素はどこに？）。</p>\n<p>実はこれは元々 Exchange 2000 のメールサーバーにブラウザからアクセスする機能を実現するために Internet Explorer 5 のβ版に搭載されたのだが、開発中に問題がたくさん起きたことで Microsoft 社内のリリースの期限に間に合いそうになかったので、どうしても出したかった開発者の Alex さんは同僚が作っていた XML 処理ライブラリに無理やり混ぜ込んで出荷することにした（そのため XML とほぼ関係ない機能なのに言い訳として XML という名前をつけた）とのことだった。</p>\n<p><a href=\"https://web.archive.org/web/20160304055328/http://www.alexhopmann.com/xmlhttp.htm\">Web Archive で読める Alex さんのブログ</a>の言葉を借りれば</p>\n<blockquote>\n<p>doesn’t have any specific tie to XML other than that was the easiest excuse for shipping it</p>\n</blockquote>\n<p>Microsoft みたいな大企業でそんなことやっていいのか？とも思うが、結果としてはこの行動によって Exchange 2000 のリリース前にそれにウェブから接続できるクライアント、つまり XMLHttpRequest を使えるブラウザ）が普及しきっている状態を作れた。ビジネス的には成功だったと言えそうだ。</p>\n<h3>第6章</h3>\n<p>第4章〜第5章で登場した機能を備えた HTTP/1.1 のクライアントを Go 言語で実装する。</p>\n<p>基本的には標準ライブラリを通じて TLS 通信をするための簡単なクライアントとサーバーを作るのだが、証明書の作り方から説明されていて初心者にも優しかった。</p>\n<h3>第7章〜第8章</h3>\n<p>HTTP/2 や HTTP/3 時代におけるプロトコルの再定義や新しく登場したユースケースを紹介する。SPDY や QUIC（これは厳密には HTTP ではないが）の仕組みについても解説されている。</p>\n<p>この時代の新たなユースケースとしてはセマンティックウェブ、モバイルの DeepLink、HTTPライブストリーミングによる動画再生などがある。</p>\n<p>個人的には WebRTC （Real-Time Communication）が興味深かった。HTTP は基本的にブラウザとサーバーの間の通信だが、 WebRTC はブラウザ同士の P2P 通信（例えば1対1もしくは複数人でのシンプルなビデオ通話システムやスクリーンの共有）にも使うことができるし1対多のリアルタイム映像配信にも使える。トランスポート層には通常の HTTP 通信と同様に TCP を使うこともできるが、通常は UDP を使う。このプロトコルはヘッダサイズが少なく TCP と比べて信頼性が低い代わりに転送速度が速い。</p>\n<p>HTTP の上でリアルタイム配信を行う HLS（HTTP Live Streaming）では（ストリーミングという名前がついているものの）実際にはチャンクごとにダウンロードが完了しないと再生が始められないため、どうしても30秒程度の遅延が発生してしまう。また、 HLS はサポートされている環境が少ないというデメリットもある。</p>\n<h3>第9章</h3>\n<p>第7章〜第8章で登場した HTTP/2 のいくつかの実装を Go 言語で行う。</p>\n<p>WebSocket を使って簡単なリアルタイム通信のチャットルームを作ったりする。</p>\n<h3>第10章〜第13章</h3>\n<p>REST API の考え方や現実世界での実装例、利用方法、JavaScript の XMLHttpRequest や FetchAPI をつかった動的な HTTP アクセス、ウェブアプリケーションの基本的なリクエスト-レスポンスのフローやインフラ構成等をかんたんに紹介している。</p>\n<p>個人的に興味を惹かれたのは CDN 関連の記述だった。CDN はユーザーから物理的に近くに位置する高機能なプロキシサーバーで、 Akamai やら CloudFront やら Fastly やら様々な製品が存在する。コンテンツをキャッシュしてレスポンスを高速化することもできるが、キャッシュをしなくてもインターネット上でクライアントからサーバーへのホップ数を削減する効果がある。</p>\n<p>どちらの使い方であってもサーバーの負荷軽減やユーザー体験の向上に大きな役割を果たすので非常に有用ではあるものの、ユーザーごとに同じ URL で異なる内容を見せなければならないケース（例えば会員制サイトのマイページとか）では Cache-Control ヘッダで適切なディレクティブが設定されていないと同じ URL を開いた別のユーザーが前のユーザーの画面を見ることになってしまうケースがあるので注意しなければならない。</p>\n<p>本書では事例としてメルカリのインシデントが紹介されていた。</p>\n<p><a href=\"https://engineering.mercari.com/blog/entry/2017-06-22-204500/\">https://engineering.mercari.com/blog/entry/2017-06-22-204500/</a></p>\n<h3>第14章</h3>\n<p>最後の1章はまるまるセキュリティに割かれている。 XSS や中間者攻撃、セッションハイジャック、 CSRF 、リスト型アカウントハッキング等さまざまな攻撃手法を紹介しつつ、ブラウザや HTTP の機能を使ってそれらをどう防ぐかが解説されている。実装例というよりは、このような仕組みが用意されているからこういう考え方でセキュリティ対策をしようという説明が並んでいた。</p>\n<p>同じような内容は IPA （ビールじゃない方）の「安全なウェブサイトの作り方」という無料の PDF にも書かれていたので、どちらも読むと理解が深まっていいかもしれない。このようなセキュリティ対策はやらかすと一発アウトなので何回読んでもいい。</p>\n<p><a href=\"https://www.ipa.go.jp/security/vuln/websecurity.html\">https://www.ipa.go.jp/security/vuln/websecurity.html</a></p>\n<p>この章で興味深かった仕組みとして、古のセッション管理とセッション固定化攻撃の話があった。私はその昔携帯電話向けにゲームを作る会社で働いていたことがあって、その頃は素人なりに URL にセッションID出てるの大丈夫なのだろうかと思っていたが、どうやらフィーチャーフォンでは Cokkie が使えない機種があったからそうせざるを得なかったらしい。</p>\n<h2>まとめ</h2>\n<p>自分の感想を書いたが、なにぶん私自身が初心者なのでこの本の魅力を紹介しきれていない気がする。</p>\n<p>この本の最大の長所は HTTP の歴史を体系的に一冊にまとめたことにあると思っている。今は既に使われていない技術がなぜ生まれなぜ消えたか、という記述も豊富で、各技術や仕様の歴史の中での位置づけを確認しながら読めるので理解が進みやすい。</p>\n<p>初心者は体系的に整理された HTTP の知識を一冊で得られるので、プログラミングを始めたけどウェブの仕組みがよく分かってない、という人には特におすすめしたい。自分がまさにそうだったように。</p>\n<p>幸い冒頭で挙げたようにミニ版（本書の要約）が無料で公開されているので、気になる方はぜひダウンロードしてみてください。</p>\n<p><a href=\"https://www.oreilly.co.jp/books/9784873118789/\">https://www.oreilly.co.jp/books/9784873118789/</a></p>","frontmatter":{"title":"Real World HTTP（第2版）を読んだ話","date":"May 12, 2021","description":null}},"previous":{"fields":{"slug":"/2021-04-04-uipath-ipo/"},"frontmatter":{"title":"UiPath が上場するので Form S-1 をさらっと読む"}},"next":{"fields":{"slug":"/2021-07-02-review-comment/"},"frontmatter":{"title":"プログラミングを初めて1年ちょっとで指摘されたこと、ミスしたこと"}}},"pageContext":{"id":"46640fd5-5808-5c66-94cf-ed9e064d405e","previousPostId":"036efa3f-c037-510c-b613-9ef8200c59c8","nextPostId":"0b5ec32c-d3e5-5f2b-97b2-3711624601f6"}},
    "staticQueryHashes": ["2841359383","3257411868"]}