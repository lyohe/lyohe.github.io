{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2022-05-21-readable-code/",
    "result": {"data":{"site":{"siteMetadata":{"title":"ここにかく"}},"markdownRemark":{"id":"5838c871-27c2-5962-be51-d24c938f0daa","excerpt":"「リーダブルコード」を読んだので、紹介しつつ感想を書く。 https://www.amazon.co.jp/dp/487311565…","html":"<p>「リーダブルコード」を読んだので、紹介しつつ感想を書く。</p>\n<p><a href=\"https://www.amazon.co.jp/dp/4873115655\">https://www.amazon.co.jp/dp/4873115655</a></p>\n<h2 id=\"背景\" style=\"position:relative;\"><a href=\"#%E8%83%8C%E6%99%AF\" aria-label=\"背景 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>背景</h2>\n<p>普段の仕事でプログラムを書いていて、コードレビューにおいて「リーダブルコード的に言うと…」という指摘を受けることがあった。</p>\n<p>自分で自分のコードの読みやすさに関して課題を感じていた（数ヶ月前に書いたコードが何してるのかよく分からない）こともあり、書籍を読んでみることにした。</p>\n<h2 id=\"概要と感想\" style=\"position:relative;\"><a href=\"#%E6%A6%82%E8%A6%81%E3%81%A8%E6%84%9F%E6%83%B3\" aria-label=\"概要と感想 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>概要と感想</h2>\n<p>書籍の概要は以下の通り。</p>\n<blockquote>\n<p>コードは理解しやすくなければならない。本書はこの原則を日々のコーディングの様々な場面に当てはめる方法を紹介する。名前の付け方、コメントの書き方など表面上の改善について。コードを動かすための制御フロー、論理式、変数などループとロジックについて。またコードを再構成するための方法。さらにテストの書き方などについて、楽しいイラストと共に説明する。日本語版ではRubyやgroongaのコミッタとしても著名な須藤功平氏による解説を収録。</p>\n</blockquote>\n<p>まさにこの通りの内容だった。大まかに以下の3部に分かれている。</p>\n<ol>\n<li>表面上の改善</li>\n<li>ループとロジックの単純化</li>\n<li>コードの再構成</li>\n</ol>\n<p>簡単に一部を紹介したい。</p>\n<h3 id=\"1-表面上の改善\" style=\"position:relative;\"><a href=\"#1-%E8%A1%A8%E9%9D%A2%E4%B8%8A%E3%81%AE%E6%94%B9%E5%96%84\" aria-label=\"1 表面上の改善 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 表面上の改善</h3>\n<p>変数や関数の命名、コードのレイアウトやフォーマット、良いコメントのつけ方について。</p>\n<p>変数や関数の命名は明確で具体的にその振る舞いを示す非汎用的名前をつけるのが良い。</p>\n<p>例えば <code class=\"language-text\">GetPage</code> という名前の関数があったとして「ページを取ってくるのかな？」という挙動は予測できるが、それをどこからどうやって取ってくるのかは見当がつかない。インターネット経由で取ってくるなら <code class=\"language-text\">FetchPage</code> とか <code class=\"language-text\">DownloadPage</code> のような名前をつけるべきだろう。</p>\n<p>また、大きさを表すのに <code class=\"language-text\">Size</code> という汎用的な名前よりは <code class=\"language-text\">Height</code> とか <code class=\"language-text\">Bytes</code> のように中身がより明確に想像できる方が良い。<code class=\"language-text\">Get</code> や <code class=\"language-text\">Size</code> のような汎用的な命名であっても、生存期間が短ければ（= 定義してすぐ使われ他の場所では使われないなど、影響範囲が狭ければ）問題ない。</p>\n<p>命名する際はユーザー（その関数や変数を使う側）の視点に立って期待に沿うような命名をする。誤解を防ぐためには、より明確な語彙を使う。例えば文字列を一部削除して整形するような関数なら <code class=\"language-text\">clip</code> よりは <code class=\"language-text\">remove</code> とか <code class=\"language-text\">truncate</code> のように、より具体的な振る舞いを示す単語を使うのが良い。</p>\n<p>コードのレイアウトについても基本的な思想は同じで、読み手に分かりやすいよう整える。読み手が慣れているパターンに沿って関連するコードをブロックにまとめ、似ているコードを同じ場所に集める。プログラムは書く時間より読む時間が長い。</p>\n<p>例えばテストコードであれば、「状況 A で入力 B から振る舞い X を経て出力 Y を期待する」のような動作をコードとして書き、実際にその状況をセットアップしたり入力値を用意する処理はヘルパーメソッドとして分けておくのが良い。</p>\n<p>コメントは書き手の意図を読み手に知らせるための道具であって、コードからすぐに分かることはコメントすべきではない。なぜなら、その分だけコードを読む時間が減るからだ。\n例えば下記のコメントは全く役に立たない。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// address で指定されたメールアドレス宛にメールを送る</span>\n  <span class=\"token function\">sendMail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">address<span class=\"token punctuation\">,</span> subject<span class=\"token punctuation\">,</span> body</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>コメントするのであれば、「このコードを読む/使う時にミスしがちなことはなんだろう？」のように読み手使い手の立場に立って役に立つコメントを書く。例えば上記の関数であれば、下記のようなコメントだったら役に立つだろう。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// メールを送信する外部サービス hogehoge を呼び出す（1分でタイムアウト）</span>\n<span class=\"token function\">sendMail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">address<span class=\"token punctuation\">,</span> subject<span class=\"token punctuation\">,</span> body</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>関数や変数の中身や振る舞いについてはコメントではなく良い名前をつけることで読みやすくすべきだが、大きなクラスやファイルなどで先頭にその責任や挙動の全体像をコメントすることは理に適っている（その分コードを読む時間が少なくて済む）。</p>\n<h3 id=\"2-ループとロジックの単純化\" style=\"position:relative;\"><a href=\"#2-%E3%83%AB%E3%83%BC%E3%83%97%E3%81%A8%E3%83%AD%E3%82%B8%E3%83%83%E3%82%AF%E3%81%AE%E5%8D%98%E7%B4%94%E5%8C%96\" aria-label=\"2 ループとロジックの単純化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. ループとロジックの単純化</h3>\n<p>制御フローや式の分割について。</p>\n<p>条件やループはできるだけ自然に記述し、読み手が立ち止まって読み返す必要がないようにする。例えば変数を特定の値と比較した結果に応じて処理を分岐する場合を考える。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 調査対象 -> 比較対象</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 比較対象 -> 調査対象</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">>=</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>結果はどちらも同じだが、英語の自然な文法に沿っている上の方が読みやすいだろう。条件やループを自然にする方法としては、関心を引く条件や目立つ条件を先に書くのが良い。また、ネストは浅くして関数からはできるだけ早く返すと読みやすいコードになる。</p>\n<p>条件やループを処理するコードが長くなってきたら、一部の処理の結果を説明したり要約する変数を用意するのが良い。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> line<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># ...</span></code></pre></div>\n<p>上記のコードより下記のコードの方が読みやすい。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">username <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> username <span class=\"token operator\">==</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># ...</span></code></pre></div>\n<p>複雑なものをより単純、明確にしていくことでコードが読みやすくなる。</p>\n<h3 id=\"3-コードの再構成\" style=\"position:relative;\"><a href=\"#3-%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E5%86%8D%E6%A7%8B%E6%88%90\" aria-label=\"3 コードの再構成 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. コードの再構成</h3>\n<p>コードを大きく変更したり完全に削除することについて。</p>\n<p>場当たり的にコードを追加していくと、ついつい大きな読みづらい関数やクラスが誕生してしまう。</p>\n<p>関数やコードブロックを見て、「このコードの高レベルの目標は何か」を抽出し、各行に対してその目標に直接的に効果があるのか「無関係の下位問題」を解決しているのかを自問することで、読みやすい単位に分割していくことができる。</p>\n<p>無関係の下位問題は何と「無関係」なのかというと、コードが解決しようとしている課題の前提となる問題を解決することで、例えば以下のような問題が挙げられる。</p>\n<ul>\n<li>高レベルの目標が「与えられた緯度経度に最も近い要素を配列から選ぶ」だとすると、「球面三角法の余弦定理」は無関係の下位問題にあたる</li>\n<li>高レベルの目標が「ファイルの中身をすべて読み込む」だとすると、「ファイルをバッファに読み込む」は無関係の下位問題にあたる</li>\n<li>高レベルの目標が「サーバを Ajax で呼び出してレスポンスを処理する」だとすると、「レスポンスを整形して綺麗な形で出力する」は無関係の下位問題にあたる</li>\n</ul>\n<p>このように大きな問題を明確な境界線を持つ小さな問題に分離していくことで、一度に考えることを減らすことができ、効率よくコードを読み進められるようになる。</p>\n<p>このような「無関係の下位問題」は誰かがライブラリとして開発していたり言語標準ライブラリに組み込まれていたりするので、それを使うのが良い。</p>\n<p>特に言語標準ライブラリの裏には膨大な設計、デバッグ、修正、文書、最適化の努力、テストがあり、時の試練を生き延びてきているので大きな価値がある。定期的に標準ライブラリのドキュメントやコードを読んでどんなことができそうか考えることで、自分のコードを単純に小さいまま保つことができるようになる。</p>\n<h2 id=\"印象的だった箇所\" style=\"position:relative;\"><a href=\"#%E5%8D%B0%E8%B1%A1%E7%9A%84%E3%81%A0%E3%81%A3%E3%81%9F%E7%AE%87%E6%89%80\" aria-label=\"印象的だった箇所 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>印象的だった箇所</h2>\n<p>第13章「短いコードを書く」の冒頭にこんな言葉がある。</p>\n<blockquote>\n<p>最も読みやすいコードは、何も書かれていないコードだ。</p>\n</blockquote>\n<p>ここでは例として「店舗検索システム」が挙げられている。任意のユーザーの緯度経度を基に近い店舗を検索するというシステムを作ろうとすると、日付変更線を跨いだときや北極南極近辺の処理、地球の曲率など様々な要素を考慮しなければならない。</p>\n<p>しかし、その対象店舗がアメリカ合衆国のテキサス州に30店舗しか無いとしたらどうだろうか。単純に総当たりでユーザーと30店舗との距離を計算して最も近い距離の店を返せば十分だろう。計算量も大したことはなさそうだ。</p>\n<p>これと似た事象はプログラマに限らず割とどこでもあって、事前に完璧にやろうとすると無限に時間がかかるものの、課題の 80% くらいを解決する単純な方法はすぐ作れたりする。最初からいろいろ考えて準備しても、使われなかったり無駄に複雑にしてしまい説明や理解が難しくなる。</p>\n<p>限られた時間で多くのことをするには、とりあえず小さく単純な形で始めてみて必要になったら追加していく精神が重要そうだ。</p>\n<p>コードを一切書かず人の手も一切動かさずに問題を解決できるなら、それが一番いい。</p>\n<h3 id=\"単純さ\" style=\"position:relative;\"><a href=\"#%E5%8D%98%E7%B4%94%E3%81%95\" aria-label=\"単純さ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>単純さ</h3>\n<p>本書の感想ではないが、最近読んだ文章で似たような話がありとても面白かった。</p>\n<p><a href=\"https://note.com/ruiu/n/n9948f0cc3ed3\">note: 「悪い方が良い」原則と僕の体験談 Rui Ueyama</a></p>\n<p>実装の単純さが良いデザインに優先することもある。</p>\n<h2 id=\"最後に\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\" aria-label=\"最後に permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最後に</h2>\n<p>10年前に出版された本だが、中身には全く古さを感じなかった。</p>\n<p>あえて言うと「JavaScript では var を使おう（var をつけずに変数を使うとグローバルスコープになるため）」という記述があるが、現代の JavaScript で var を使うことはほぼ無く原則は const 例外的に let を使うだろう。</p>\n<p>これは本書が誤っているのではなく、本書の指針（変数への代入は一度だけ..）に沿った機能が出版後に JavaScript へ取り込まれたからベストプラクティスが変わったのであって、本書の内容自体は読みやすく使いやすいコードを書く上で非常に役立つと思った。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E8%83%8C%E6%99%AF\">背景</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%A6%82%E8%A6%81%E3%81%A8%E6%84%9F%E6%83%B3\">概要と感想</a></p>\n<ul>\n<li><a href=\"#1-%E8%A1%A8%E9%9D%A2%E4%B8%8A%E3%81%AE%E6%94%B9%E5%96%84\">1. 表面上の改善</a></li>\n<li><a href=\"#2-%E3%83%AB%E3%83%BC%E3%83%97%E3%81%A8%E3%83%AD%E3%82%B8%E3%83%83%E3%82%AF%E3%81%AE%E5%8D%98%E7%B4%94%E5%8C%96\">2. ループとロジックの単純化</a></li>\n<li><a href=\"#3-%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E5%86%8D%E6%A7%8B%E6%88%90\">3. コードの再構成</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%8D%B0%E8%B1%A1%E7%9A%84%E3%81%A0%E3%81%A3%E3%81%9F%E7%AE%87%E6%89%80\">印象的だった箇所</a></p>\n<ul>\n<li><a href=\"#%E5%8D%98%E7%B4%94%E3%81%95\">単純さ</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\">最後に</a></p>\n</li>\n</ul>","frontmatter":{"title":"リーダブルコードを読んだ話","date":"May 21, 2022","description":null}},"previous":{"fields":{"slug":"/2022-03-30-2years/"},"frontmatter":{"title":"プログラマー2年目の振り返り"}},"next":null},"pageContext":{"id":"5838c871-27c2-5962-be51-d24c938f0daa","previousPostId":"734da85f-0f69-5e86-9823-1acfb99bcb81","nextPostId":null}},
    "staticQueryHashes": ["1445466728","2841359383"]}