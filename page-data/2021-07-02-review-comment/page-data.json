{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2021-07-02-review-comment/",
    "result": {"data":{"site":{"siteMetadata":{"title":"ここに書く"}},"markdownRemark":{"id":"0b5ec32c-d3e5-5f2b-97b2-3711624601f6","excerpt":"去年の4月頃からプログラマーとして働きはじめて1年と3ヶ月が経ち、2021年も半分が終わった。今でも会社で経理や労務の仕事をしたりビールサーバーを洗ったりする仕事も続けているが、プログラムを書く時間は次第に増え楽しくなってきた。 未経験で転職したこともあり自分が（趣味以外で）書いたコードのほぼ 10…","html":"<p>去年の4月頃からプログラマーとして働きはじめて1年と3ヶ月が経ち、2021年も半分が終わった。今でも会社で経理や労務の仕事をしたりビールサーバーを洗ったりする仕事も続けているが、プログラムを書く時間は次第に増え楽しくなってきた。</p>\n<p>未経験で転職したこともあり自分が（趣味以外で）書いたコードのほぼ 100% が上司にレビューされているのだが、振り返るといろいろ初歩的なミスをやらかしてきたような気がする。</p>\n<p>せっかく時間を割いてもらっているので、印象に残ったコードレビューやプログラミング、仕事に取り組む姿勢に関する指摘を書き残しておくことにした。</p>\n<p>この記録がいつかどこかで誰かの役に立つと嬉しい。なお、この記事は私自分の認識に基づいているので、上司の知識や情報を完全に反映していない、もしくは誤った解釈をしている可能性がある。</p>\n<h2 id=\"基本\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E6%9C%AC\" aria-label=\"基本 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本</h2>\n<ul>\n<li><strong>何をするにしても公式ドキュメントを読む</strong>\n<ul>\n<li>よくある落とし穴（例: <a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/\">Nginx</a>）とかだいたい書いてある</li>\n<li>初学者が踏みそうな穴は既に誰かが踏んでいると考えてよい</li>\n</ul>\n</li>\n<li><strong>タスクを分解し、変更を確実に動作する小さな単位で積み重ねていく</strong>\n<ul>\n<li>例えば React でフォームを作るなら…\n<ol>\n<li>クライアント\n<ul>\n<li>ボタンを押したときにモーダルが出るようにする</li>\n<li>モーダルが出たらフォームを表示してみる</li>\n<li>フォームを submit したら <code class=\"language-text\">console.log</code> するだけの Hook を作ってみる</li>\n</ul>\n</li>\n<li>サーバー\n<ul>\n<li>フォームの送付先のルーティングを追加し、 ok だけを返す API を作る</li>\n<li>↑ が動いていることを curl 等で確認</li>\n</ul>\n</li>\n<li>再びクライアント\n<ul>\n<li><code class=\"language-text\">console.log</code> を↑で作った API に切り替える</li>\n<li>レスポンスが ok であることを確認する</li>\n</ul>\n</li>\n<li>↑ここまでできたら一通り動いたことになるので、フォームの要件に応じてビジネスロジックを作り込んでいく</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"gitgithub\" style=\"position:relative;\"><a href=\"#gitgithub\" aria-label=\"gitgithub permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git/GitHub</h2>\n<ul>\n<li><strong>コミットや PR は小さな単位で行う</strong>\n<ul>\n<li>Diff が大きすぎるとレビューに大きな時間的・精神的コストがかかる</li>\n<li>指摘があったときに軌道修正しやすい</li>\n</ul>\n</li>\n<li><strong>不要なコミットは <code class=\"language-text\">squash</code> でまとめてから出すべし</strong>\n<ul>\n<li>基本は所属する開発チームの流儀に従うのがいいらしい</li>\n</ul>\n</li>\n<li><strong>コミットメッセージは命令形で書く</strong>\n<ul>\n<li>流派はいろいろあるので開発チームの流儀に従うのがいいらしい</li>\n<li>参考: Git は命令形でやっている <a href=\"https://git.kernel.org/pub/scm/git/git.git/tree/Documentation/SubmittingPatches?id=HEAD\">https://git.kernel.org/pub/scm/git/git.git/tree/Documentation/SubmittingPatches?id=HEAD</a></li>\n</ul>\n</li>\n<li><strong>原則的に履歴改変はしない</strong>\n<ul>\n<li>例えば <code class=\"language-text\">rebase</code> して履歴を書き換えると、その branch を他の人が触ってた場合 pull できなくなる</li>\n<li>改変はその branch を誰も触ってないという確信があるときのみやっても可\n<ul>\n<li>例えばまだ remote に <code class=\"language-text\">push</code> してないとき</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>OSS に PR を出すときはまず Fork して自分のアカウント配下で修正版を作り、 upstream に PR を出す</strong>\n<ul>\n<li>「Pull」を「Request」するから PR</li>\n<li>GitLab だと Merge Request と呼ばれている\n<ul>\n<li>ワークフローが GitHub と違い、同一リポジトリ内でブランチを作成するから（GitHub も同じリポジトリでブランチ作る場合はあるけど、それはまぁ気にしなくていいらしい）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>上司の Git のワークフローの基本的な考え方は下記の記事に近いので読むようにと言われた。</p>\n<p><a href=\"https://songmu.jp/riji/entry/2021-05-19-my-git-workflow.html\">https://songmu.jp/riji/entry/2021-05-19-my-git-workflow.html</a></p>\n<h2 id=\"セキュリティ\" style=\"position:relative;\"><a href=\"#%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3\" aria-label=\"セキュリティ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>セキュリティ</h2>\n<ul>\n<li><strong>パスワードは何があろうと平文で保存してはいけない</strong>\n<ul>\n<li>入力を受け取ってからできるだけ早い段階で暗号化しなければならない</li>\n<li>世間的に実績のあるハッシュ関数を使って暗号化・ストレッチングする</li>\n</ul>\n</li>\n<li><strong>SSH の port は well known port を避ける</strong>\n<ul>\n<li>本質的にはめちゃくちゃ有効な対策ではない（パスワードログイン禁止して強度の高い rsa 鍵をきちんと管理するとかの方がよほど重要だ）が、余計な口を開けておく必要はない\n<ul>\n<li>けど、 SSH はだいたい何でもできてしまうので特に気をつける</li>\n<li>他にも使わない port があったら積極的に閉じる</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>あえて自分の開発環境で脆弱性を作ってそれを攻撃してみる</strong>\n<ul>\n<li>気づかぬ内に脆弱性を作り込んでしまう可能性はいたるところにあるので、基本的な概念やどういう状態が危険かは理解しておく\n<ul>\n<li>たとえば SQL 組み立てるときにはプレースホルダを使うべき、とか</li>\n<li>ログインが必要なページでは CSRF トークンを作るべき、とか</li>\n</ul>\n</li>\n<li>一見ちゃんと動いているように見えて実は穴だらけ、というケースはよくある\n<ul>\n<li>脆弱性のあるバージョンの WordPress で動いているウェブサイトとか…</li>\n</ul>\n</li>\n<li>きちんと対策をするには HTTP/HTTPS の仕組みとかブラウザが何をするかとか基本的な知識が重要</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"命名\" style=\"position:relative;\"><a href=\"#%E5%91%BD%E5%90%8D\" aria-label=\"命名 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>命名</h2>\n<ul>\n<li><strong>プログラミング言語ごとの習慣やチームのやり方に合わせる</strong>\n<ul>\n<li>JavaScript であれば変数や関数の名は基本的に lowerCamelCase でクラス名は UpperCamelCase</li>\n<li>他の人が読んで感じる「この関数はこう動きそう、この変数にはこういうデータが入ってそう」という直感を裏切らないような名前にする\n<ul>\n<li>プロジェクト内で命名の法則に整合性がないと、読みづらいコードになってしまう</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"設計\" style=\"position:relative;\"><a href=\"#%E8%A8%AD%E8%A8%88\" aria-label=\"設計 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>設計</h2>\n<ul>\n<li><strong>利用者が UI 上で何らかの入力をしてデータを取得・変更するまでの流れを意識しながら、責務ごとに層を分割する</strong>\n<ul>\n<li>例えば…\n<ul>\n<li>認証や入力値のチェックを行う層</li>\n<li>実現したいビジネスロジックを書く層</li>\n<li>ビジネスロジックからデータを受け取ってデータベースに save する層</li>\n</ul>\n</li>\n<li>実装にあたっては層ごとに何を引数として受け取って何を解決するかの役割を常に意識する</li>\n</ul>\n</li>\n<li><strong>設計の早い段階でレビューを受ける</strong>\n<ul>\n<li>例えば…\n<ul>\n<li>データベースや API のスキーマを作ったらレビューしてもらう</li>\n<li>ビジネスロジックやデータの操作をする関数をシグネチャだけ作ってレビューしてもらう</li>\n<li>こうしておけば、何か見落としや勘違いがあったとき早めに軌道修正できる</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"コーディング\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0\" aria-label=\"コーディング permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コーディング</h2>\n<ul>\n<li><strong>エディタやシェル、ターミナル環境は自分で使いやすいようにカスタマイズする</strong>\n<ul>\n<li>使い込んでる人の様子を後ろから、もしくは画面共有してもらって眺める</li>\n<li>他人の設定ファイル（.vimrc とか .zshrc とか .tmux.conf のようにdot <code class=\"language-text\">.</code> で始まるので dot files と呼ばれる）を参考にして自分のをメンテナンスしていく</li>\n</ul>\n</li>\n<li><strong>キーボードから手を離さずにあらゆる操作ができることを目指す</strong>\n<ul>\n<li>次の単語や特定の行にジャンプするとか、n行削除するとか</li>\n</ul>\n</li>\n</ul>\n<p>上司は Vim を使っていたので当初は Vim を使うことにした。Vim には <code class=\"language-text\">vimtutor</code> というターミナルから起動できる公式チュートリアルがあって、30分くらいで基本的な操作を学ぶことができる。</p>\n<p>いまは VSCode を Vim キーバインドで使っているが、コードを編集するスピードをどうやって上げるかを考えるとき「Vim を少しでも触っててよかった」と思うことが多い。Vim にしろ他のエディタにしろ無限に機能があるので、自分が使うところから学んでいくのがよさそう。</p>\n<h2 id=\"デバッグ\" style=\"position:relative;\"><a href=\"#%E3%83%87%E3%83%90%E3%83%83%E3%82%B0\" aria-label=\"デバッグ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>デバッグ</h2>\n<ul>\n<li><strong>エラーで動かないときは Stack Trace から自分が書いた行を拾う</strong>\n<ul>\n<li>ライブラリがバグってるより自分の書いたコードがバグってる可能性の方が高いので、まずは自分が書いた行を読む</li>\n</ul>\n</li>\n<li><strong>開発中は変数に何が入っているかをコンソールに出しながら進めるとよい</strong>\n<ul>\n<li>JavaScript なら <a href=\"https://www.npmjs.com/package/debug\">debug</a> を使うとどこで出してるデバッグのログなのかがコンソール上できれいに色分けされて見られるので便利</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"テスト\" style=\"position:relative;\"><a href=\"#%E3%83%86%E3%82%B9%E3%83%88\" aria-label=\"テスト permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>テスト</h2>\n<ul>\n<li><strong>カバレッジを目的にしない</strong>\n<ul>\n<li>全ての行にテストを書く必要はないけど、テストを書いたほうが変更しやすいのは間違いないのでどんどん書きましょう</li>\n</ul>\n</li>\n<li><strong>ミスした箇所や複雑なビジネスロジックのテストを重点的に書く</strong></li>\n</ul>\n<h2 id=\"css\" style=\"position:relative;\"><a href=\"#css\" aria-label=\"css permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS</h2>\n<ul>\n<li><strong>画面のレイアウトには flexbox を使う</strong>\n<ul>\n<li><a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">この記事</a>が分かりやすい</li>\n</ul>\n</li>\n<li><strong>とにかく練習あるのみ</strong>\n<ul>\n<li>Chrome Dev Tools で既存の Web サイトの CSS を書き換えたりすると楽しい</li>\n<li>デザインに自信が無い場合はルールだけ覚えておくとよい（xxとyyの間はzz以上開ける…とか）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"javascripttypescriptその他一般的なプログラミングに関する指摘\" style=\"position:relative;\"><a href=\"#javascripttypescript%E3%81%9D%E3%81%AE%E4%BB%96%E4%B8%80%E8%88%AC%E7%9A%84%E3%81%AA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E6%8C%87%E6%91%98\" aria-label=\"javascripttypescriptその他一般的なプログラミングに関する指摘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript/TypeScript、その他一般的なプログラミングに関する指摘</h2>\n<ul>\n<li><strong>配列の繰り返し処理をするときは C 言語っぽい for 文ではなく map や filter 等の Array インスタンスに用意されたメソッドを使う</strong></li>\n<li><strong>非同期処理を書くときは Promise そのままではなく async/await を使う</strong>\n<ul>\n<li>Promise 自体を理解しているという前提</li>\n<li>ほぼ async/await でいいけど、何でもかんでも async/await で書けばよいという訳ではない\n<ul>\n<li>複数の非同期処理を並列で実行したい場合は Promise.all を使うだろうし</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>繰り返し処理の中で SQL を発行するようなコードは N+1 Problem という典型的なアンチパターンなので避けるべき</strong>\n<ul>\n<li>例えば、あるオブジェクトの配列から id というフィールドを取り出してそれで SELECT するなら、オブジェクトの map で SQL を発行するのではなく、まず id を map で取り出してからそれをまとめて一つの文で SELECT するのがよい</li>\n<li>このケースに限らず、無駄に効率の悪い SQL 文を発行してないかは常に気にした方がよい</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"react\" style=\"position:relative;\"><a href=\"#react\" aria-label=\"react permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React</h2>\n<ul>\n<li><strong>コンポーネントは原則的にクラスではなく関数で書く</strong>\n<ul>\n<li>つまり、引数 props を受け取って JSX を返す関数として実装する</li>\n<li>クラスが有効なケースは例外的・限定的（ほぼ無いと考えてよい）なので、それを理解できるまでは関数で書く</li>\n<li>バケツリレーしない（特定の範囲に閉じている）状態の管理は Hooks を使う\n<ul>\n<li>グローバルの状態管理には Context API や Redux 等のライブラリを使う</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>データは基本的にコンポーネントの階層関係における「上」から渡していく</strong>\n<ul>\n<li>Flux Architecture と呼ばれている体系的な考え方があるらしい\n<ul>\n<li>以下のようにデータを管理して流れる方向を統一する\n<ul>\n<li>何かしらのユーザーの行動（ボタンをクリックしたり）に応じて何らかの処理を行う</li>\n<li>それにより何かしらのデータが更新される</li>\n<li>更新されたデータに応じて画面の見た目を更新する</li>\n</ul>\n</li>\n<li>機能的にはこの方針に従わなくても実現は可能だが、 Flux Architecture に従うことで、どこで何をやってるかが分かりやすくなる</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>コンポーネントはその役割や責務に応じて適切なサイズに分割する</strong>\n<ul>\n<li>例えば…\n<ul>\n<li>同じ画面を構成するコンポーネントであっても、「ビジネスロジックを呼び出すコンポーネント」と「データを受け取って描画するコンポーネント」は分ける</li>\n<li>ちょっと古い記事だけど<a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\">この記事</a>が分かりやすい</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"その他\" style=\"position:relative;\"><a href=\"#%E3%81%9D%E3%81%AE%E4%BB%96\" aria-label=\"その他 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>その他</h2>\n<ul>\n<li><strong>できるだけスペックの高いマシンを使う</strong>\n<ul>\n<li>例えば Docker for Mac はデフォルトで 2GB のメモリ（変更可）が割り当てられておりその範囲内で動くけど、メモリが足りなくてコンテナやサービスの起動に失敗するケースがあったりする</li>\n<li>アプリやコンテナをたくさん立ち上げても余裕で動くような高いスペックのマシンを求めましょう</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"いい資料\" style=\"position:relative;\"><a href=\"#%E3%81%84%E3%81%84%E8%B3%87%E6%96%99\" aria-label=\"いい資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>いい資料</h2>\n<p>ここ1年半くらいで特に勉強になった本や資料を挙げておく。いいエンジニアの人はいい資料を知っているのでどんどん教えてほしい。</p>\n<p>まず MDN Web Docs。Web に関係することがだいたい何でも書いてある。</p>\n<p><a href=\"https://developer.mozilla.org/ja/\">https://developer.mozilla.org/ja/</a></p>\n<p>転職当初、これは絶対に読めと言われた「ふつうのLinuxプログラミング」という本。強く勧められたので印象に残っている。 <code class=\"language-text\">head</code> とか <code class=\"language-text\">grep</code> のコマンドを作るのが楽しかった。</p>\n<p><a href=\"https://www.amazon.co.jp/dp/4797386479/\">https://www.amazon.co.jp/dp/4797386479/</a></p>\n<p>IPA（情報処理推進機構）の「安全なウェブサイトの作り方」という資料。 XSS、CSRF、SQL インジェクション等の一般的な脆弱性の仕組みやそれを防ぐ方法が書かれている。</p>\n<p><a href=\"https://www.ipa.go.jp/security/vuln/websecurity.html\">https://www.ipa.go.jp/security/vuln/websecurity.html</a></p>\n<p>JavaScript の Promise が全く理解できなかったときに読んだ「Promise の本」という Web サイト。これが無かったら挫折していたかもしれない。<a href=\"https://github.com/azu\">著者の azu さんという方</a>に細々と毎月 GitHub Sponsor しています。</p>\n<p><a href=\"https://azu.github.io/promises-book/#introduction\">https://azu.github.io/promises-book/#introduction</a></p>\n<p>↑と同じ著者の方が書いている JavaScript Primer という Web サイトも素晴らしい。 JavaScript はアップデートが早いので、ググって出てきた情報が古いことがよくあり、初心者にとって信頼できる情報源はとても重要。これ無料でいいのか！？という気持ちが強い。</p>\n<p><a href=\"https://jsprimer.net/\">https://jsprimer.net/</a></p>\n<p>React の公式ドキュメント。単に API の仕様だけでなく、 React がどのように動作するかの仕組み（例えばコンポーネントのライフサイクル等）が詳しく記述されている。</p>\n<p><a href=\"https://reactjs.org/docs/getting-started.html\">https://reactjs.org/docs/getting-started.html</a></p>\n<p>Shopify の GraphQL Design Tutorial。 GraphQL のスキーマをどうやって作ればいいか全く分かってなかったので勉強になった。</p>\n<p><a href=\"https://github.com/Shopify/graphql-design-tutorial/blob/master/TUTORIAL.md\">https://github.com/Shopify/graphql-design-tutorial/blob/master/TUTORIAL.md</a></p>\n<p>最近みつけた「仕事ですぐに使えるTypeScript」という Web サイト。1日で一通り読める分量で、一般的な JavaScript 周りの環境構築（テスト、フォーマッター/リンター、CI、Docker イメージ作成、React/Vue/Electron などの環境）の情報がまとまっているのがよい。</p>\n<p><a href=\"https://future-architect.github.io/typescript-guide/\">https://future-architect.github.io/typescript-guide/</a></p>\n<p>HTTP の進化をたどる「Real World HTTP」。Go で簡単なクライアント/サーバーを実装しながら HTTP/HTTPS の仕組みを一通り学べる。分厚い本なので、連休中などで一気に進めてどこに何が書いてあるかを把握してから辞書的に使うのがよさそう。<a href=\"https://lyohe.github.io/post/2021-05-12-real-world-http2/\">感想を前回のブログで書いた</a>。</p>\n<p><a href=\"https://www.amazon.co.jp/dp/4873119030\">https://www.amazon.co.jp/dp/4873119030</a></p>\n<h2 id=\"印象に残ったミス\" style=\"position:relative;\"><a href=\"#%E5%8D%B0%E8%B1%A1%E3%81%AB%E6%AE%8B%E3%81%A3%E3%81%9F%E3%83%9F%E3%82%B9\" aria-label=\"印象に残ったミス permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>印象に残ったミス</h2>\n<p>自分が開発中にやった恥ずかしいミスたちの例。これ以外にも無限にあるけど思い出したやつを書いた。</p>\n<ul>\n<li>Array.prototype.find メソッドを使って配列から特定の条件を満たす要素だけを返す処理を実装していたときに比較（<code class=\"language-text\">===</code>）を代入（<code class=\"language-text\">=</code>）で書いてしまった\n<ul>\n<li>if や while であれば ESLint の <a href=\"https://eslint.org/docs/rules/no-cond-assign\">no-cond-assign</a> で気づける</li>\n</ul>\n</li>\n<li>練習用の Web サイトを .dev ドメインで作ったが HTTPS 専用であることを知らず、強制的に HTTPS にされるのをがんばって HTTP でアクセスできるようにしようとした（できなかった）</li>\n<li>Node.js の LTS （偶数バージョンの Long Term Support）の概念を理解しておらず、数字が大きいほど良いやつだと勘違いして LTS でない奇数バージョンを積極的に使っていた</li>\n</ul>\n<h2 id=\"終わりに\" style=\"position:relative;\"><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\" aria-label=\"終わりに permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>終わりに</h2>\n<p>何とかクビにならずにやっています。リモートワークで物理的に人間に会うのが2週間に1回くらいなので、もともと低い社会性が更に落ちてきました。</p>\n<p>これからもがんばります。</p>","frontmatter":{"title":"プログラミングを初めて1年ちょっとで指摘されたこと、ミスしたこと","date":"July 02, 2021","description":null}},"previous":{"fields":{"slug":"/2021-05-12-real-world-http2/"},"frontmatter":{"title":"Real World HTTP（第2版）を読んだ話"}},"next":{"fields":{"slug":"/2021-07-11-fastly-2/"},"frontmatter":{"title":"Fastly の財務諸表を読んだ話 その2"}}},"pageContext":{"id":"0b5ec32c-d3e5-5f2b-97b2-3711624601f6","previousPostId":"46640fd5-5808-5c66-94cf-ed9e064d405e","nextPostId":"3037845b-79b5-5bf0-8195-2d768840f88d"}},
    "staticQueryHashes": ["1445466728","2841359383"]}