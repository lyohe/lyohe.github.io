{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2021-02-03-hugo-to-github-pages/",
    "result": {"data":{"site":{"siteMetadata":{"title":"ここにかく"}},"markdownRemark":{"id":"066ac723-5747-5fb4-9ee1-2c1c873286e3","excerpt":"このブログは Hugo + GitHub Pages で作った。 Hugo Hugo は Go 製の静的サイトジェネレータで、 Markdown 等で書いた文章から Web サイトを生成してくれる。\n生成した Web サイトの中身はただの静的なファイルなので、 Netlify や GitHub Pages…","html":"<p>このブログは Hugo + GitHub Pages で作った。</p>\n<h2>Hugo</h2>\n<p>Hugo は Go 製の静的サイトジェネレータで、 Markdown 等で書いた文章から Web サイトを生成してくれる。\n生成した Web サイトの中身はただの静的なファイルなので、 <a href=\"https://www.netlify.com/\">Netlify</a> や <a href=\"https://pages.github.com/\">GitHub Pages</a> その他さまざまなサービスで Hosting できる。</p>\n<p>Hugo には様々なテーマが用意されていて、見た目を簡単にカスタマイズできる。このブログでは <a href=\"https://themes.gohugo.io/hugo-tania/\">Tania</a> というテーマを利用している。テーマの適用は非常にかんたんで、 Hugo のプロジェクト内の themes ディレクトリにテーマをダウンロード（多くは GitHub で提供されてるので普通に clone してくればよい）し、設定ファイルで使用するテーマを指定するだけでよい。</p>\n<p>Hugo の仕組みや設定ファイルの書き方についてはさくらインターネットさんが公開している記事が分かりやすかったので、これを読んでから<a href=\"https://gohugo.io/documentation/\">公式ドキュメント</a>を読めば大抵のことは分かると思う。</p>\n<ul>\n<li><a href=\"https://knowledge.sakura.ad.jp/22908/\">【さくらのナレッジ】静的サイトジェネレータ「Hugo」と技術文書公開向けテーマ「Docsy」でOSSサイトを作る</a></li>\n</ul>\n<p>ちなみに上記のサイトでは設定ファイルとして config.toml を使っているが、 TOML だけでなく YAML も設定ファイルとして使うことができる。</p>\n<h2>GitHub Pages に deploy するまで</h2>\n<p>GitHub Pages を始めるのは非常に簡単で、ここに書いてある通りにやるだけでよい。</p>\n<p><a href=\"https://pages.github.com/\">https://pages.github.com/</a></p>\n<p>リポジトリを作ったら <code class=\"language-text\">hugo new post/ファイル名</code> で新しくファイルを作り、 Markdown 等でコンテンツを書く。テーマによって書き方が異なるケースがあるので、テーマごとの Demo サイトと自分のサイトを見比べたり <code class=\"language-text\">hugo server</code> でローカルで動かしてチェックするのがよい。</p>\n<p>コンテンツを格納する場所は設定ファイルで変更できる。また、記事のひな形を作りたいときは <code class=\"language-text\">archetypes/default.md</code> を編集すると <code class=\"language-text\">hugo new</code> で生成するファイルの中身を変えることができる。</p>\n<p>デプロイするときは <code class=\"language-text\">hugo</code> コマンドで public/ 内に Web サイトを生成できるので、それを GitHub Pages 用に作った <code class=\"language-text\">username.github.io</code> という名前の repository に push すればよい（username のところには GitHub のユーザー名を入れる）。</p>\n<p>GitHub アカウントに二要素認証を設定している方は push するときにユーザー名とパスワードで認証できない場合があるので、 <a href=\"https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token\">personal access token</a> を作って password の代わりにそれを入力する。</p>\n<p>Hugo の公式ドキュメントにはデプロイ用のスクリプトの例もある。</p>\n<p><a href=\"https://gohugo.io/hosting-and-deployment/hosting-on-github/\">https://gohugo.io/hosting-and-deployment/hosting-on-github/</a></p>","frontmatter":{"title":"Hugo + GitHub Pages でブログを作った話","date":"February 03, 2021","description":null}},"previous":{"fields":{"slug":"/2021-02-02-introduction/"},"frontmatter":{"title":"ブログを作りました"}},"next":{"fields":{"slug":"/2021-02-04-programming-taihenda/"},"frontmatter":{"title":"プログラミング1年くらいやってつまづいたこと"}}},"pageContext":{"id":"066ac723-5747-5fb4-9ee1-2c1c873286e3","previousPostId":"378e1850-2f3b-54ae-ba59-86a27eda8d75","nextPostId":"9f561b0a-f8ba-5fa6-819f-521ca965e208"}},
    "staticQueryHashes": ["1445466728","2841359383"]}