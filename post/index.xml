<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ここにかく</title>
    <link>https://lyohe.github.io/post/</link>
    <description>Recent content in Posts on ここにかく</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 13 Feb 2021 17:33:47 +0900</lastBuildDate><atom:link href="https://lyohe.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fusuma でスライドを作るスライドを Fusuma で作る</title>
      <link>https://lyohe.github.io/post/2021-02-13-made-slides-with-fusuma-make-slides-with-fusuma/</link>
      <pubDate>Sat, 13 Feb 2021 17:33:47 +0900</pubDate>
      
      <guid>https://lyohe.github.io/post/2021-02-13-made-slides-with-fusuma-make-slides-with-fusuma/</guid>
      <description>Fusuma は Markdown でスライドを作る OSS で、最近大きなアップデートが行われた。
 Markdownでスライドを作るツールのFusumaのv2をリリースをしました  上記の記事で Fusuma の存在を知り、自分でも試しに使ってみた。
思ったより楽に良さげなスライドができたのでスライドを作る際の選択肢の一つとしてお勧めしたい。しかしながら、自分が作ったスライドが公開できないやつなので、別に Fusuma を使ってスライドを作る方法を説明するスライドを作りそれをブログに書くことにした。
なお、本記事の Fusuma に関する情報のほぼ全ては README と公式サイトの intro 、site/docs/guides を読めば書いてあることしか書いていない。そちらの方が正確かつ詳しいので、使ってみようかと思った方はそちらを読んだ方が有益そうだ。
この記事には主に自分の動機や印象に残ったことを書いた。
（Fusuma は Slide door だから Fusuma っていう名前なのかな&amp;hellip;）
自分の動機 何故スライドを Markdown で作るのか？
多くの人はスライドを作るとき Microsoft PowerPoint / Keynote / Google Slides を使うと思う。これらの製品は GUI で多彩な操作ができ、直感的でとても便利だ。人によって好みは分かれるだろうが、私は Google Slides が大好きでよく使っていた。
既製のスライド作成ソフトへのちょっとした不満 Google スライドの機能に関しては大きな不満はないのだが、起動してスライドの体裁を整えて&amp;hellip;みたいなのがちょっと面倒だなーと感じていた。
そこで Markdown でやれば手軽にスライド作れるのでは！？と思ったのが Fusuma に手を出した理由だ。また、テキストなので Git 等の VCS でバージョン管理しやすいというメリットもある。
スライドを作るスライド 完成品はこちら ↓ で、ここの GitHub Pages にディレクトリ分けてデプロイした。
https://lyohe.github.io/slide/fusuma-example
iframe で埋め込むこともできる（自分側の都合でサイズの調整がちょっと難しかった）。</description>
    </item>
    
    <item>
      <title>Google クラウド巨大赤字の話</title>
      <link>https://lyohe.github.io/post/2021-02-06-google-cloud-comprehensive-loss/</link>
      <pubDate>Sat, 06 Feb 2021 11:56:34 +0900</pubDate>
      
      <guid>https://lyohe.github.io/post/2021-02-06-google-cloud-comprehensive-loss/</guid>
      <description>Google の Cloud セグメントが約5,880億円の巨額損失を出したというニュースを見かけた。
[TechCrunch] Google Cloudは2020年に約5880億円の損失 https://jp.techcrunch.com/2021/02/03/2021-02-02-google-cloud-lost-5-6b-in-2020/
Form 10-K はこちら。
この赤字について身近で様々な意見を見かけたが、自分の印象と異なるものが多かったので個人的な意見を書いておきたい。
以下、 $ 1B = $ 1 Billion（10億ドル）とする。
GCP は大丈夫か？ このニュースを見て GCP 大丈夫かな？続くのかな？というのが気になる人がいると思う。むしろ何千億円の赤字なんて大丈夫かと思うのが普通だろう。
しかしながら、Cloud で何千億円の赤字を出したところで Google がどうにかなるわけではない。Alphabet, Inc は純資産が $222B あって2020年12月期の包括利益は$ 40B 以上あるし、 Cloud セグメントは高い成長率のクラウド業界で全体の平均より大幅に高い成長率（YoY +47%）を出している。
Cloud の売上は下記の通り増加し、2年間で2倍以上に成長している。
 2018 -&amp;gt; 2019: $5.8B -&amp;gt; $8.9B（YoY+53%） 2019 -&amp;gt; 2020: $8.9B -&amp;gt; $13.0B（YoY+47%）  なお、今週行われた Conference call では CEO によって Revenue backlog が Q3 -&amp;gt; Q4 で $19B -&amp;gt; $30B 1に増加し、増加要因のほぼ全てが Cloud セグメントであると述べられている。 backlog は未認識の収益で、つまり先の期でそれくらい収益を得られる契約があるということになる。これは GCP がプラットフォームとして多くの企業から信頼されていることを表しているし、今後の成長も期待できる。</description>
    </item>
    
    <item>
      <title>プログラミング1年くらいやってつまづいたこと</title>
      <link>https://lyohe.github.io/post/2021-02-04-programming-taihenda/</link>
      <pubDate>Thu, 04 Feb 2021 19:11:37 +0900</pubDate>
      
      <guid>https://lyohe.github.io/post/2021-02-04-programming-taihenda/</guid>
      <description>プログラミングを本格的に始めてから1年くらい経ったので、今まで印象に残ったつまづきポイントを書いておく。
C言語 去年の今頃は 42 Tokyo の Piscine に参加していた（そのときの記事）。
このときはC言語でひたすら libc の再実装をしていた。それまでは Python や JavaScript でちょっとしたスクリプトを書いただけでC言語を書いたことが無かったのでとても辛かった（毎日100回の Segmentation fault を見る生活を4週間続けた）が、コンピュータの基礎に近づけた気がした。メモリをいちいち人間が確保したり解放したりしなきゃいけないというのがとても面倒だった覚えがある。
ところで、人間がコンピュータを使って何かしらの課題を解決しようとしたときに突き当たる壁として、ハードウェアやソフトウェアにそれぞれ多数の階層が積み重なっていて、どこで何が行われているかということを知らないと調査したり解決したりに時間がかかるという問題がある。
そういう意味ではいわゆるシステムプログラミングというか低レイヤーのプログラミングにも興味がある。ただ、今の自分は初心者プログラマーに過ぎないし、レイヤーに限らずソフトウェアエンジニアリング的に難しい仕事を任せてもらえるような立場ではない。これはプログラミングを続けていくしかない。
C言語は辛かったので最近 Rust を始めてみたが、これはこれで別の辛さがあった。ただコンピュータを使って問題を解決する仕事でお金をもらう以上、いずれ避けては通れない分野だと思っている。
CSS CSS って難しくないですか？
そもそもどこに何を書いたらどうなるのか全然分からないし、どのプロパティが継承されるかも分からない。あと Web サイトを作るときにどこからどこまでが CSS の仕事なのかもよくわからない。
今はとりあえず flexbox でひな形を作り、 Chrome の Dev Tools で Element を見てコピペしている。
デザインのセンスが致命的に無いので自分で CSS を書くのが辛いが、これも結局書いて慣れるしかないと思っている。
JavaScript JavaScript は文法そのものはそれほど難しくないと思うが、 Promise の概念を理解するのに1ヶ月くらいかかった。Promise は非同期処理を抽象化したオブジェクトで、結果を使って成功と失敗を分岐させるのだが、その非同期処理という概念そのものがよく分からなかった。
この変数が undefined になるのでなんでだろう〜と苦しんでいた記憶がある。結果としては、下記の Web サイトを上から下まで5回くらい読んでだいたい理解できた。
https://azu.github.io/promises-book/
プログラミングを始める前は「プログラムというものは人間が実現したい命令を予め決められた文法に従って記述した文や式である」と考えていたが、実際にはそれらの命令を抽象化する概念やそれを実装したオブジェクトや関数がたくさんあって、それらを知らないで文法だけ知っていてもやりたいことを実現するのは難しい。
例えば人間の直感からすると同期的なプログラミングの方が分かりやすい（と信じている）が、コンピュータ資源やユーザー体験の側面から見てそれが適切だとは限らない（ので、非同期プログラミングが誕生した）。文法だけでなくそれが導入された背景とか今まで積み重ねてきたものを理解しないとなかなか自分のやりたいことができないという辛みがある。書いてて思ったけどこれプログラミングに限らないな。
要はやっていくしかない。
そもそもの話 データ構造とアルゴリズム 再帰とかソートみたいな基本的なロジックから先にあるやつ（グラフ探索とか動的計画法とかなんとか優先探索とか）が全然分からない。
競技プログラミングの AtCoder を半年くらいやってみたけど Rating 324 で止まった（灰色）。これも勉強してプログラムをひたすら書いていくしかない。
どこに何を書くか 仕事のプログラムを書いていて、動くには動くんだけどこれここに書いていいんだっけ？という場面が無限にある。</description>
    </item>
    
    <item>
      <title>Hugo &#43; GitHub Pages でブログを作った話</title>
      <link>https://lyohe.github.io/post/2021-02-03-hugo-to-github-pages/</link>
      <pubDate>Wed, 03 Feb 2021 09:27:07 +0900</pubDate>
      
      <guid>https://lyohe.github.io/post/2021-02-03-hugo-to-github-pages/</guid>
      <description>このブログは Hugo + GitHub Pages で作った。
Hugo Hugo は Go 製の静的サイトジェネレータで、 Markdown 等で書いた文章から Web サイトを生成してくれる。 生成した Web サイトの中身はただの静的なファイルなので、 Netlify や GitHub Pages その他さまざまなサービスで Hosting できる。
Hugo には様々なテーマが用意されていて、見た目を簡単にカスタマイズできる。このブログでは Tania というテーマを利用している。テーマの適用は非常にかんたんで、 Hugo のプロジェクト内の themes ディレクトリにテーマをダウンロード（多くは GitHub で提供されてるので普通に clone してくればよい）し、設定ファイルで使用するテーマを指定するだけでよい。
Hugo の仕組みや設定ファイルの書き方についてはさくらインターネットさんが公開している記事が分かりやすかったので、これを読んでから公式ドキュメントを読めば大抵のことは分かると思う。
 【さくらのナレッジ】静的サイトジェネレータ「Hugo」と技術文書公開向けテーマ「Docsy」でOSSサイトを作る  ちなみに上記のサイトでは設定ファイルとして config.toml を使っているが、 TOML だけでなく YAML も設定ファイルとして使うことができる。
GitHub Pages に deploy するまで GitHub Pages を始めるのは非常に簡単で、ここに書いてある通りにやるだけでよい。
https://pages.github.com/
リポジトリを作ったら hugo new post/ファイル名 で新しくファイルを作り、 Markdown 等でコンテンツを書く。テーマによって書き方が異なるケースがあるので、テーマごとの Demo サイトと自分のサイトを見比べたり hugo server でローカルで動かしてチェックするのがよい。</description>
    </item>
    
    <item>
      <title>ブログを作りました</title>
      <link>https://lyohe.github.io/post/2021-02-02-introduction/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lyohe.github.io/post/2021-02-02-introduction/</guid>
      <description>はじめまして。
GitHub Pages + Hugo でブログを作ってみました。
GitHub アカウント名は lyohe です。これは私の本名が「りょうへい（Ryohei）」なんですが、むかし少しだけ一緒に仕事したポルトガル人の同僚に物凄い巻き舌で「お前の名前『ッりょへ』っていうのか。すごく呼びづらいな！（意訳）」って言われて R じゃなくて L なのかなと思ってつけました。その結果、より発音しづらくなったっぽいです。
自分の名前に identity を感じないため Web サービスの ID はそのときの気分で決めています（Twitter: @rtsudar）が、アイコンにはいつも同じ写真を使うようにしています。この写真はトルクメニスタンの国会記事堂付近の地面に映った自分の影です。観光で行ったら夕方で影が長く伸びてたのが気に入って撮りました。議事堂の写真を撮るのは忘れました。
このブログにはプログラミングの話を書こうと考えています。とはいえ、私はプログラミングに関しては素人同然で数学や情報科学の素養もなく31歳未経験でプログラマーに転職したので、技術的に面白いと思ってもらえるような話が書けるかは分かりません。しかし、学んだことや新しく知ったことを整理して書くことは必ず自分の理解の促進に繋がると考えています。つまり自分のためでもあります。
元々は10年ほど経理の仕事をしていましたが、様々な仕事に触れる中で将来的に会計税務に関連する仕事でもプログラミングが重要になりそうだな〜と思って転職しました。
好きなことは読書で、嫌いなことは労働です。
これからよろしくお願いします。</description>
    </item>
    
  </channel>
</rss>
