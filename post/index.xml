<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ここにかく</title>
    <link>https://lyohe.github.io/post/</link>
    <description>Recent content in Posts on ここにかく</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 12 May 2021 22:59:32 +0900</lastBuildDate><atom:link href="https://lyohe.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Real World HTTP（第2版）を読んだ話</title>
      <link>https://lyohe.github.io/post/2021-05-12-real-world-http2/</link>
      <pubDate>Wed, 12 May 2021 22:59:32 +0900</pubDate>
      
      <guid>https://lyohe.github.io/post/2021-05-12-real-world-http2/</guid>
      <description>5月の連休中に Real World HTTP（第2版）を通読したので、簡単に感想をメモしておく。
https://www.amazon.co.jp/dp/4873119030
なお、この本の要約版が無料で公開されているので、買う前にまずはこちらを読むのがいいかもしれない。
https://www.oreilly.co.jp/books/9784873118789/
背景 なぜこの本を読むことにしたかというと、自分自身がプログラミング初心者であり、仕事や趣味でプログラムを書いていて HTTP に関する知識が不足している（&amp;hellip;というか、あらゆる点が全部不足してるんだけど）と感じることが多かったからだ。
プログラミングしていると、言語の標準ライブラリやそれをラップしたパッケージ等で気軽に HTTP 通信を扱うことがよくある。そうすると自分で書くプログラムは少なくて済むのだが、実際にどういう仕組みで動いているのかが分からないので問題が起きたときにどこを調べればいいか分からなくなってしまう。あと単純にどう動いてるかの概要が自分で分かってないと気持ち悪い。
インターネットを通じて何かを提供するためのプログラムを書いてお金をもらう仕事をしていく以上は HTTP の勉強を避けては通れないと思ったし、連休何もすることがなかったので、時間をかけて読んでみることにした。
書籍の概要 本書を一言で表すと「HTTP の歴史書」と言えると思う。
1ページ目の「まえがき」にはこうある。
 本書では、変化が大きくない領域である、HTTP（Hypertext Transfer Protocol）というウェブの転送用のプロトコルにフォーカスして紹介します。CGIとウェブアプリケーションサーバー、または最近でてきたサーバーレスアーキテクチャなど、ウェブサービスの裏で実装に使われる言語や仕組みはここ20年で大きく移り変わりましたが、実際にブラウザとサーバーの通信に関わる部分のコンセプトは20年近く、あまり変わっていません。コンピュータ業界は、日進月歩で新しい技術などが出続けるため、学び続けないといけないとよく言われます。それは半分正しくて半分間違っています。コンピュータサイエンスにあたるような内容、業界標準のプロトコル、テストしやすく見通しの良いコードの書き方、アルゴリズム、データベースなどは、一度学んでも無駄になることはありません。
 HTTP は「送信側（クライアント）」と「受信側（サーバー）」の両方がルールに従ってメッセージをやり取りする仕組みであり、この基本は誕生以来変わっていない。しかし一方で、ウェブの発展に伴って主なクライアントであるブラウザに様々な機能が追加されたり、それが仕様として標準化されたりしてきた。
最新の仕様を読むと巨大なプロトコルだが、歴史を辿っていくと最初は特定の課題を解決するためのシンプルなプロトタイプから始まり、それぞれの段階（HTTP/0.9 や 1.0、2など…）で状況に応じて現実のユースケースに対応するための改善がされていったという経緯があることが分かる。
その経緯を実際に手元で試しながら体系的に学ぶことで、新しい技術であっても何からどのように発展しているのかを知ることができ理解の促進に繋がる。ここに歴史を学ぶ意義がある。
原典といえる RFC への参照もあるので、気になった仕様をいくらでも深堀りできる。とても分厚い（約450ページ）本なので内容を全て覚えることは不可能だが、一度通読してどこに何が書いてあるか何となく把握できれば困ったことが起きる度に辞書的に引けて非常に便利になると思う。
そのため、思い立ったらすぐにめくれる紙媒体で買うのをおすすめしたい。
章ごとの大まかな構成と一言感想 第1章〜第2章 HTTP の先祖といえる電子メールやニュースグループから始まり、メソッドとパス、ヘッダー、ボディ、ステータス等の HTTP の基本概念やコンテントネゴシエーション、クッキー、セッション、キャッシュなどブラウザの裏側を支える仕組みを説明する。
今まで「何となくこういうものかな」と考えていた技術が体系的に整理されており、それぞれの関係性や複数の技術や機能の組み合わせでどのようなユースケースが実現されているかが分かりやすく解説されていて面白かった。
第3章 第1章〜第2章の内容を簡単におさらいしながらそれを実現する HTTP クライアントを Go 言語で実装する。
私はここで初めて Go 言語に触れたのだが、文法がシンプルで読みやすくて驚いた。仕事で使うレベルにするには修行が必要だろうが、読んで何をしているか把握するだけなら C や JavaScript 、または似たような言語を書いたことがあれば困らないと思う。
第4章〜第5章 主に HTTP/1.1 時代の新機能を紹介する。
Keep-Alive の仕組みや TLS の仕組み（鍵交換や通信手順によって何を守るか）、追加されたメソッド（CONNECT など）、さらには HTTP/1.1 時代に用途として追加されたファイルのダウンロード、XMLHttpRequest、ウェブサイト間の共通認証認可プラットフォーム（SAML や OAuth、OpenID など）がどのように実現されているかを解説する。</description>
    </item>
    
    <item>
      <title>UiPath が上場するので Form S-1 をさらっと読む</title>
      <link>https://lyohe.github.io/post/2021-04-04-uipath-ipo/</link>
      <pubDate>Sun, 04 Apr 2021 13:02:58 +0900</pubDate>
      
      <guid>https://lyohe.github.io/post/2021-04-04-uipath-ipo/</guid>
      <description>有名な RPA のユニコーン1 である UiPath が上場するらしい。
https://jp.techcrunch.com/2021/03/29/2021-03-26-a-first-look-at-uipaths-ipo-filing/
自分は UiPath を使ったことがない（Zapier はよく使う）のだが、せっかくなので Form S-1 を軽く読んでみた。
https://www.sec.gov/Archives/edgar/data/1734722/000119312521094920/d98556ds1.htm
主要な指標 2021年1月期の主要な指標は以下の通り。
ARR （Annualized Renewal Run-Rate または Annual Reccurring Revenue の略）は毎年繰り越される収益のことで、一般的には以下を意味する。
ARR = 前年の収益 + 新規契約やアップグレードで得る収益 - 解約やダウングレードで失う収益 新規顧客を獲得しつつ既存顧客との関係を維持・拡大する能力を示す指標なので、収益の積み上げが重要になる SaaS 企業の開示でよく使われる。
UiPath における ARR の定義は Form S-1 の 75 ページに書いてある（実は同じ ARR という用語を使っていても各社定義が異なるので単純比較は難しい）。クソ長いので一部だけ引用すると
 We define ARR as annualized invoiced amounts per solution sku from subscription licenses and maintenance obligations assuming no increases or reductions in their subscriptions.</description>
    </item>
    
    <item>
      <title>React と Redux における immutability の重要性、あるいは JavaScript を何も理解してなかった話</title>
      <link>https://lyohe.github.io/post/2021-03-17-javascript-nanimo-wakaranai/</link>
      <pubDate>Wed, 17 Mar 2021 14:14:14 +0900</pubDate>
      
      <guid>https://lyohe.github.io/post/2021-03-17-javascript-nanimo-wakaranai/</guid>
      <description>JavaScript は奥が深い。以前このブログに「JavaScript はそれほど難しくないと思う」と書いたが、全くそんなことはなかった。
発端 React と Redux のドキュメントや関連するブログを読んでいると、しつこいくらい immutable や immutability という単語が登場する。
immutable は mutable の対義語。 mutable は mutate + -able で、 mutate は「ミュータント - mutant」という言葉に使われるように「変異する」という意味。ちなみにこの単語はニューヨークの下水道で暮らす亀が忍者に変異して悪と戦うアニメで覚えた。
immutable はその対義語なので「不変性」を意味しており、要は「あるオブジェクトの中身を直接書き換える（mutate）のではなくて、そのコピーを作ってそれを書き換えなさい」ということを指している。一般的に、 JavaScript において object を immutable update することにはいくつかのメリットがある。
https://developer.mozilla.org/en-US/docs/Glossary/Immutable
実は React のチュートリアルでも immutability の重要性について説明されているのだが、私はなぜそれが必要なのかを深く理解しないままやり過ごしてきた。
しかし、どうも気になる&amp;hellip;なんでわざわざこんな事をしなければならんのか。ということで、調べてブログに書くことにした。
JavaScript における immutability React や Redux における immutability の重要性について調べる前に、まずは JavaScript の基本を学ぶ。
JavaScript において、値は必ず primitive か object のいずれかになる。
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures
primitive は以下の7種類のデータ型で、これらに該当しない値が object となる。
 string number bigint boolean undefined symbol null  https://developer.</description>
    </item>
    
    <item>
      <title>電子取引証憑の紙出力による保存が NG になる、税制改正大綱に基づく電子帳簿保存法改正の話</title>
      <link>https://lyohe.github.io/post/2021-03-12-dencho/</link>
      <pubDate>Fri, 12 Mar 2021 12:12:12 +0900</pubDate>
      
      <guid>https://lyohe.github.io/post/2021-03-12-dencho/</guid>
      <description>そして、電子データで保存する際には「受領後すぐにタイムスタンプを付す」など、受け手側で一定の処理をする必要があります。現行制度では、PDFでもらったのをプリントしておけばオケなんですが、それではダメになります。最悪の場合、青色申告承認の取り消しになるリスクを取引先に負わせることに。
&amp;mdash; 米津良治／BASE(ベイス)総合会計事務所 (@zeiri4z) March 7, 2021  ↑これ本当か？と思ったので東京国税局調査開発課（電子帳簿保存に詳しいところ）に電話で聞いてみた。
結論から言うと、制度上の取り扱いについてはこの Tweet に書いてあることが正しい。Tweet の中身に対してはちょっと言いたいことがあるが、主旨から外れるので最後に書いた。
なお、この記事に書いてあることは既に電子帳簿保存の承認を受けている会社には大きな影響がないのでそういう人は読まなくてもよい。
問題点 この米津さんによる冒頭の Tweet が真であれば、電子取引については2022年1月以降、請求書や領収書の授受を行う双方で電子帳簿保存法に即した対応をしなければならない。
つまり、電子取引に該当する取引についてはその根拠となる電子データの保存について一定の要件を満たさなければならない。
電子取引の幅は広く、例えば下記の例は電子取引に該当する。
 電子メールで請求書や領収書の PDF ファイルを受領し、紙の請求書を受け取らない インターネット上の管理画面などから PDF や CSV 等で請求データをダウンロードし、紙の請求書を受け取らない  これらは現行の電子帳簿保存法の下で、国税関係帳簿・書類 1 の電子データによる保存には所轄税務署長の承認が必要（一定の保存要件あり）であり、電子取引については（所轄税務署長の承認は必要なく）紙と保存要件を満たした電子データのどちらで保存してもいいということになっている。
よって現行制度では、電子帳簿保存の承認申請を行っていなければ、電子取引の請求書や領収書について
 原則的に全ての証憑を紙で保存する 電子取引に該当する場合（例: 電子メールで送られてきた PDF 等）は、印刷して保存する 電子取引の保存要件を満たしている場合は印刷しなくてよい  という対応が可能だが、今回の税制改正で電子取引については 2. の対応が不可能となり、電子取引に該当する場合は必ず保存要件を満たさなければならなくなってしまう。つまり訂正削除履歴を残したり認定事業者によるタイムスタンプを押す等の対応をしなければならない。
これが真ならそれなりに経理実務に影響がありそう&amp;hellip;ということで気になったので、調査開発課に質問してみることにした。
質問の内容 電子帳簿保存法（電子計算機を使用して作成する国税関係帳簿書類の保存方法等の特例に関する法律）第10条には、こう書いてある。
—— （電子取引の取引情報に係る電磁的記録の保存） 第十条　所得税（源泉徴収に係る所得税を除く。）及び法人税に係る保存義務者は、電子取引を行った場合には、財務省令で定めるところにより、当該電子取引の取引情報に係る電磁的記録を保存しなければならない。ただし、財務省令で定めるところにより、当該電磁的記録を出力することにより作成した書面又は電子計算機出力マイクロフィルムを保存する場合は、この限りでない。 ——
ところで、令和3年度税制改正大綱の98ページを読むと以下のような記述がある。
—— （4）国税関係書類に係るスキャナ保存制度並びに申告所得税、法人税及び消費税 における電子取引の取引情報に係る電磁的記録の保存制度について、次のとお り電磁的記録の適正な保存を担保するための措置を講ずる。 （中略） ② スキャナ保存が行われた国税関係書類の電磁的記録並びに申告所得税及び 法人税における電子取引の取引情報に係る電磁的記録について、次のとおりとする。 （中略） ロ 申告所得税及び法人税における電子取引の取引情報に係る電磁的記録の保存義務者が行う当該電磁的記録の出力書面等の保存をもって当該電磁的記録に代えることができる措置は、廃止する。 （中略） ——
この「②ロ」には「申告所得税及び法人税における電子取引の取引情報に係る電磁的記録の保存義務者が行う当該電磁的記録の出力書面等の保存をもって当該電磁的記録に代えることができる措置は、廃止する。」とあるが、これはあらゆる会社の電子取引に適用されるのか。
だとすると、例えば電子メールの添付ファイルのみで請求書を受け取る場合、これは電子取引に該当すると考えられるが、税制改正の施行後は紙への出力による保存ができなくなり、電子取引の電磁的記録の保存に関する要件を満たす必要があるのか。
つまり、来年1月以降の電子取引については例えばタイムスタンプを付す、または訂正削除の記録を残す等の対応をしなければならないのか。</description>
    </item>
    
    <item>
      <title>東日本大震災から10年</title>
      <link>https://lyohe.github.io/post/2021-03-11-ten-years-after/</link>
      <pubDate>Thu, 11 Mar 2021 15:52:42 +0900</pubDate>
      
      <guid>https://lyohe.github.io/post/2021-03-11-ten-years-after/</guid>
      <description>東日本大震災から10年が経った。
当時の私は卒業が決まった大学4年生で、就職先の会社の近く（西新宿と中野坂上の間あたり）に引っ越して一人暮らしを始めたばかりだった。
地震が起きたときは確か PC でゲームをしていたと思う。今振り返るとあり得ない行動だとは思うが、東京に4 ~ 5年住んでて地震はちらほらあったので「また地震かー今回のは大きいな」くらいの認識で、特にニュースを見ることもなく地震が収まった後に昼寝してしまった。
地震発生から 3 ~ 4 時間後、外が暗くなってから九州に住んでいた親からの電話で目を覚ました。後から着信履歴を見ると何十回も電話してきていたようで、心配をかけてしまったかもしれない。
親からは「早く電話に出なさい」「仙台が大変なことになってるからニュースを見なさい」「何かあったら必ず連絡しなさい」といわれた。
実際には仙台以外も被害を受けていたのだが、近所に住んでいた同級生の一家が引っ越して仙台に住んでいたので仙台のことが気になっていたのかもしれない。
私の家にはテレビは無かったのだが、ネットニュースを見ると東北地方の各地で甚大な被害が出ていることがすぐに分かった。津波の映像も見たのだが、あまりに衝撃的で現実感がなかった。
当時はニコニコ生放送で NHK が24時間ミラーされていて、眠気で倒れるまでディスプレイにかじりついて見ていた気がする。原発事故のときも NHK の映像をずっと見ていた。
3 ~ 4日くらい経つとだんだん現実が飲み込めてきて、就職先のことが心配になってきた。私の就職先は東京ビッグサイトのような大規模コンベンションセンターで商業展示会を主催する事業を営んでいた。ビッグサイトの建物自体には大きな損傷はなかったものの、震災後の混乱や様々な事情でビッグサイトのイベントは次々と中止になっていった。
気になってしまい毎日朝起きたらビッグサイトのホームページを見て中止になったイベントを調べていたが、結局その会社のイベントは開催された。後から聞いたところでは社内外でいろいろな意見があったらしいが、阪神大震災の直後にも数々の展示会が中止になる中開催を強行して出展社から感謝されたという過去があったらしく、そのときも「こんなときこそ商売の機会を中止してはいけない」という思いがあったらしい。
個人的には会社の方針に疑問を抱くことが多かった（結局すぐ辞めた）ものの、今では確かにそういう考え方もあるなと思うようになった。昨今の新型コロナヴィルス感染症拡大の中で開催強行してたのはどうかと思うけど。
自分は幸いにして震災によって自分の家族や大事なものが失われてしまうという体験はなかったけど、震災やその後の混乱で亡くなった人や苦労している人の話を聞くといつか自分にもそういうときが来るのではと考える。
災害でなくても生きていると何かしら大きな損害を受けるリスクはあるし、そういう人に手を差し伸べられるような人間でありたいなと思う。逆に自分が困ったとき手を差し伸べてくれる人がいることを期待しているのかもしれない。
ということで、メルカリでゲーム売った金があったので被災地の自治体に1,000円ずつ寄付した。少ないけど継続的に寄付をやっていきたい気持ちがある。 https://about.mercari.com/press/news/articles/20210310_mercari_kifu/</description>
    </item>
    
    <item>
      <title>会計とプログラミングの仕事をやっていきたい話</title>
      <link>https://lyohe.github.io/post/2021-02-21-sigoto/</link>
      <pubDate>Sun, 21 Feb 2021 09:00:00 +0900</pubDate>
      
      <guid>https://lyohe.github.io/post/2021-02-21-sigoto/</guid>
      <description>特に誰向けでもないが、自分が書きたくなったので書く。
私は経理に関連した仕事をいろいろやった後プログラマーに転職してもうすぐ1年経つのだが、将来的には会計に関する仕事をやっていきたいと考えている。
プログラマーに転職してそれが今のところ続いている理由としては、個人的な興味関心とキャリアとしての可能性の2つがある。
個人的な興味関心 まずプログラミングは単純に楽しい。
まだまだ初心者レベルだが何が楽しいかというと、とにかく自分の行動に対するフィードバックが多いという理由があるかもしれない。自分が書いたプログラムを動かしたり他人のレビューを受けたり、ログやインスペクタ、 Stack trace を眺めたりなど。フィードバックから機構や制約を理解していく過程がよくできたゲームみたいで楽しい。
それから、自分が経理の仕事をやってきた中で自分が認識していた課題を解決するためにプログラミングが役に立ちそうだという印象が強まっている。
複式簿記は会計主体に生じる債権債務関係の変化を記録するための技術で、現代の財務会計では複式簿記の基礎の上に様々な概念や体系、制約1 が積み重なって最終的な財務諸表や開示書類が生まれている。
日常的な実務としては、事業で起きる膨大な数のイベントを一つ一つその制約や性質を根拠に原因と結果という二つの面に切り分けて借方と貸方に記録していく。それが積み重なり一定の体系の下で集約されて財務諸表が生まれる。言い換えると、財務会計の日常的な仕事の多くは膨大な数のイベントを分類していく作業になる。
会計処理が必要なイベントは日々様々な場所で発生していて（給与や賞与、取引先への売上や仕入、固定資産の償却、借入の返済、社員が立替払いした経費&amp;hellip;）、経理の仕事ではそれらを手で入力したり、受け取ったデータを Excel で加工したり、会計ソフトに直接流し込んだりしている。
そのような仕事に取り組む中で、自分で業務を効率化するぞ！と意気込んで Google スプレッドシートのマクロや GAS、それから Zapier のような RPA を使ったこともあった。しかしながら、非常に便利ではあるものの限界があるという印象を受けた。
それらはデータを A 地点から B 地点に移すような仕事は得意だけど、元々のデータが十分でなかったり使いづらい形だったりして結局手で隙間を埋める作業することが多かった。自動化のツールというよりは、それを使う以前の問題や自分の能力不足で思ったような結果を出せなかった。
その後いろいろあって、会計処理のデータを生み出すイベントのデータ構造やそのデータを会計に入力するワークフローとインターフェースに会計ソフト側から一定の制約を設けることで全体がより効率的に仕事できるようになるんじゃないかな〜と考えるようになった。
しかしながら、自分はただただ漠然とアイデアを考えるだけで自分の思考を具現化する能力が無かった。そこでプログラミングとかソフトウェア開発の技法とかそういうやつを自分にインストールしたかった、というのが仕事でプログラムを書きたいと考えたきっかけだったかもしれない。
ちなみに今の仕事では会計のプログラミングをしているわけではないけど、当たらずしも遠からずということをしているのでそこそこ楽しくやっている。
キャリアとしての可能性 会計 x プログラミングというのは面白いキャリアだと思う。
何らかの活動を行う上で会計を一切やらなくていい組織は無いし、自分が働くこれから20 ~ 30年（&amp;hellip;短ければ短いほどいい&amp;hellip;）の間に会計の仕事でプログラミング的思考が必要になる場合が増えることはあっても減ることはないだろうから。
Netscape の創業者 Marc Andreessen が &amp;ldquo;Why Software Is Eating the World&amp;rdquo; という有名なエッセイを発表したのが10年前だが、まさに彼が書いた通りソフトウェアは世界を喰い続けている。それと並行してソフトウェアを通じて生み出される債権債務も増え続けている。
付加価値の高いソフトウェアのインターフェースやアーキテクチャは外部環境の変化に応じて変わっていくけれども、会計の側ではその影響を人の脳と腕力で吸収することがある（時と場合と組織の判断による）。こういう状態は長続きしないので、環境の変化に適応しやすいよう会計データの保守性、拡張性、信頼性をソフトウェアを通じて維持・向上する能力の需要が高まる時代が近い内に来るのではないだろうか。会計で必要なデータの構造や要件は一般的なソフトウェアのそれと異なることが多い。
ところで、仕事を取り巻く環境が次第に変わっていく中で会計に限らず「何かの仕事 x プログラミング」をやることで得られる知識や経験は付加価値が高い。そういった横断的な知識や経験は「システムと現実世界のインターフェースをどう設計するか」や「ビジネスのルールからシステムが解決するユースケースをどう抽出するか」という設計上の課題を理解するのに生きてくるはずなので。
例えば医者がデータサイエンスや Web アプリケーションの開発を学んで遠隔医療のシステム開発に参加するとか、飲食店経営者がプログラミングを学んで店舗の管理に役立つアプリを開発するとか、そういう事例がたくさん出てくると予想している。というか、既にそういう例はたくさんあるのかもしれない。
これは自分の仕事の話なので他人のキャリアを否定する気は一切無い。それぞれ自分自身が可能な範囲で環境に適応する努力をすればいいし、しなくてもいいと思う。
当面の目標 一言でいうと会計ソフトを作りたくて、その過程で財務会計のワークフローを少しずつ抽象化していきたい。
ERP の会計部分の核だけを切り出して、状況に応じて様々な業務システムや SaaS から送られる会計処理データを受け取る（もしくは取得しにいく）ようなものをイメージしている。
日本では freee やマネーフォワードのような主として銀行の入出金明細から会計の仕訳を生成する SaaS の成長によって、中小企業の会計業務が大きく変わった。自分はもともと経理をやっていたので、ユーザーの1人としてその中にいた。外国でも状況は似ていて、会計の仕事は大きく変わりつつある。主に仕訳を作るところで自動化が進んでいる。</description>
    </item>
    
    <item>
      <title>「フロントエンド開発入門」を読んだ話</title>
      <link>https://lyohe.github.io/post/2021-02-18-frontend-beginner/</link>
      <pubDate>Thu, 18 Feb 2021 20:26:08 +0900</pubDate>
      
      <guid>https://lyohe.github.io/post/2021-02-18-frontend-beginner/</guid>
      <description>雰囲気でプログラムを書いてきたのでちゃんとフロントエンドの勉強をせねば…と思って読んだ。とても良い本だったので紹介したい。
 フロントエンド開発入門 プロフェッショナルな開発ツールと設計・実装（秀和システム）  自分のレベル  プログラミングを始めて1年くらい TypeScript とか React とか Node.js とかその辺のやつを使うことが多い フロントエンドのツール群については名前を聞いたことあるレベル 大抵は既に導入されておりその恩恵を享受しているが、自分で設定を触ったことは無い  本書の概要 全体で三段階に分かれている。
第一部: 導入編（1章〜4章） 現在「フロントエンド」と呼ばれている領域の歴史から始まり、どのようなスキルが求められておりプロジェクト内でどういう働き方をするのかを取り上げる。
個人的に素晴らしいと思ったのは第三章の「フロントエンドにおける一般的なツール群」で、 Node.js 周辺のツールやフレームワークについて簡単に基礎の基礎の説明がされていてよかった。
 Babel webpack TypeScript Vue.js, React, Angular クライアントサイド MVC と Flux Redux CSS と CSS-in-JS フォーマッターとリンターPrettier と ESLint ユニットテストMocha, Jest, Karma  これらの一つ一つを解説するとそれなりの分量になってしまうが、80ページくらいの間に「何をしてくれるツールなのか、なぜ求められているのか、最初の最初はこうやって使う」という紹介が書かれていて、使い始める前に読む文章として分かりやすいと思った。
実際に使うときは公式ドキュメントを読めばいいので、まずこういう書籍でまとめて全体像に触れるのが良さそうだ。一つ一つを習得しようとすると時間かかりそうなので、まずは感覚を掴むのが大事。
第二部: 実践編（5章〜7章） jQuery で作られた簡単な書籍のレビューサイトを TypeScript + React で置き換えながら、ユニットテストや CI/CD の導入、パフォーマンスの計測と改善を進めていく。
第一部で簡単なツールの使い方を知って、第二部でそれを実践していくという内容になっている。サンプルアプリは GitHub で公開されている。
https://github.com/n05-frontend/shuwa-frontend-book-app
これを clone してきて docker-compose で環境構築し、章ごとに branch を切り替えながら進めることで自分の手元で本と同じ環境を動かせる。</description>
    </item>
    
    <item>
      <title>Fusuma でスライドを作るスライドを Fusuma で作る</title>
      <link>https://lyohe.github.io/post/2021-02-13-made-slides-with-fusuma-make-slides-with-fusuma/</link>
      <pubDate>Sat, 13 Feb 2021 17:33:47 +0900</pubDate>
      
      <guid>https://lyohe.github.io/post/2021-02-13-made-slides-with-fusuma-make-slides-with-fusuma/</guid>
      <description>Fusuma は Markdown でスライドを作る OSS で、最近大きなアップデートが行われた。
 Markdownでスライドを作るツールのFusumaのv2をリリースをしました  上記の記事で Fusuma の存在を知り、自分でも試しに使ってみた。
思ったより楽に良さげなスライドができたのでスライドを作る際の選択肢の一つとしてお勧めしたい。しかしながら、自分が作ったスライドが公開できないやつなので、別に Fusuma を使ってスライドを作る方法を説明するスライドを作りそれをブログに書くことにした。
なお、本記事の Fusuma に関する情報のほぼ全ては README と公式サイトの intro 、site/docs/guides を読めば書いてあることしか書いていない。そちらの方が正確かつ詳しいので、使ってみようかと思った方はそちらを読んだ方が有益そうだ。
この記事には主に自分の動機や印象に残ったことを書いた。
（Fusuma は Slide door だから Fusuma っていう名前なのかな&amp;hellip;）
自分の動機 何故スライドを Markdown で作るのか？
多くの人はスライドを作るとき Microsoft PowerPoint / Keynote / Google Slides を使うと思う。これらの製品は GUI で多彩な操作ができ、直感的でとても便利だ。人によって好みは分かれるだろうが、私は Google Slides が大好きでよく使っていた。
既製のスライド作成ソフトへのちょっとした不満 Google スライドの機能に関しては大きな不満はないのだが、起動してスライドの体裁を整えて&amp;hellip;みたいなのがちょっと面倒だなーと感じていた。
そこで Markdown でやれば手軽にスライド作れるのでは！？と思ったのが Fusuma に手を出した理由だ。また、テキストなので Git 等の VCS でバージョン管理しやすいというメリットもある。
スライドを作るスライド 完成品はこちら ↓ で、ここの GitHub Pages にディレクトリ分けてデプロイした。
https://lyohe.github.io/slide/fusuma-example
iframe で埋め込むこともできる（自分側の都合でサイズの調整がちょっと難しかった）。</description>
    </item>
    
    <item>
      <title>Google クラウド巨大赤字の話</title>
      <link>https://lyohe.github.io/post/2021-02-06-google-cloud-comprehensive-loss/</link>
      <pubDate>Sat, 06 Feb 2021 11:56:34 +0900</pubDate>
      
      <guid>https://lyohe.github.io/post/2021-02-06-google-cloud-comprehensive-loss/</guid>
      <description>Google の Cloud セグメントが約5,880億円の巨額損失を出したというニュースを見かけた。
[TechCrunch] Google Cloudは2020年に約5880億円の損失 https://jp.techcrunch.com/2021/02/03/2021-02-02-google-cloud-lost-5-6b-in-2020/
Form 10-K はこちら。
この赤字について身近で様々な意見を見かけたが、自分の印象と異なるものが多かったので個人的な意見を書いておきたい。
以下、 $ 1B = $ 1 Billion（10億ドル）とする。
GCP は大丈夫か？ このニュースを見て GCP 大丈夫かな？続くのかな？というのが気になる人がいると思う。むしろ何千億円の赤字なんて大丈夫かと思うのが普通だろう。
しかしながら、Cloud で何千億円の赤字を出したところで Google がどうにかなるわけではない。Alphabet, Inc は純資産が $222B あって2020年12月期の包括利益は$ 40B 以上あるし、 Cloud セグメントは高い成長率のクラウド業界で全体の平均より大幅に高い成長率（YoY +47%）を出している。
Cloud の売上は下記の通り増加し、2年間で2倍以上に成長している。
 2018 -&amp;gt; 2019: $5.8B -&amp;gt; $8.9B（YoY+53%） 2019 -&amp;gt; 2020: $8.9B -&amp;gt; $13.0B（YoY+47%）  なお、今週行われた Conference call では CEO によって Revenue backlog が Q3 -&amp;gt; Q4 で $19B -&amp;gt; $30B 1に増加し、増加要因のほぼ全てが Cloud セグメントであると述べられている。 backlog は未認識の収益で、つまり先の期でそれくらい収益を得られる契約があるということになる。これは GCP がプラットフォームとして多くの企業から信頼されていることを表しているし、今後の成長も期待できる。</description>
    </item>
    
    <item>
      <title>プログラミング1年くらいやってつまづいたこと</title>
      <link>https://lyohe.github.io/post/2021-02-04-programming-taihenda/</link>
      <pubDate>Thu, 04 Feb 2021 19:11:37 +0900</pubDate>
      
      <guid>https://lyohe.github.io/post/2021-02-04-programming-taihenda/</guid>
      <description>プログラミングを本格的に始めてから1年くらい経ったので、今まで印象に残ったつまづきポイントを書いておく。
C言語 去年の今頃は 42 Tokyo の Piscine に参加していた（そのときの記事）。
このときはC言語でひたすら libc の再実装をしていた。それまでは Python や JavaScript でちょっとしたスクリプトを書いただけでC言語を書いたことが無かったのでとても辛かった（毎日100回の Segmentation fault を見る生活を4週間続けた）が、コンピュータの基礎に近づけた気がした。メモリをいちいち人間が確保したり解放したりしなきゃいけないというのがとても面倒だった覚えがある。
ところで、人間がコンピュータを使って何かしらの課題を解決しようとしたときに突き当たる壁として、ハードウェアやソフトウェアにそれぞれ多数の階層が積み重なっていて、どこで何が行われているかということを知らないと調査したり解決したりに時間がかかるという問題がある。
そういう意味ではいわゆるシステムプログラミングというか低レイヤーのプログラミングにも興味がある。ただ、今の自分は初心者プログラマーに過ぎないし、レイヤーに限らずソフトウェアエンジニアリング的に難しい仕事を任せてもらえるような立場ではない。これはプログラミングを続けていくしかない。
C言語は辛かったので最近 Rust を始めてみたが、これはこれで別の辛さがあった。ただコンピュータを使って問題を解決する仕事でお金をもらう以上、いずれ避けては通れない分野だと思っている。
CSS CSS って難しくないですか？
そもそもどこに何を書いたらどうなるのか全然分からないし、どのプロパティが継承されるかも分からない。あと Web サイトを作るときにどこからどこまでが CSS の仕事なのかもよくわからない。
今はとりあえず flexbox でひな形を作り、 Chrome の Dev Tools で Element を見てコピペしている。
デザインのセンスが致命的に無いので自分で CSS を書くのが辛いが、これも結局書いて慣れるしかないと思っている。
JavaScript JavaScript は文法そのものはそれほど難しくないと思うが、 Promise の概念を理解するのに1ヶ月くらいかかった。Promise は非同期処理を抽象化したオブジェクトで、結果を使って成功と失敗を分岐させるのだが、その非同期処理という概念そのものがよく分からなかった。
この変数が undefined になるのでなんでだろう〜と苦しんでいた記憶がある。結果としては、下記の Web サイトを上から下まで5回くらい読んでだいたい理解できた。
https://azu.github.io/promises-book/
プログラミングを始める前は「プログラムというものは人間が実現したい命令を予め決められた文法に従って記述した文や式である」と考えていたが、実際にはそれらの命令を抽象化する概念やそれを実装したオブジェクトや関数がたくさんあって、それらを知らないで文法だけ知っていてもやりたいことを実現するのは難しい。
例えば人間の直感からすると同期的なプログラミングの方が分かりやすい（と信じている）が、コンピュータ資源やユーザー体験の側面から見てそれが適切だとは限らない（ので、非同期プログラミングが誕生した）。文法だけでなくそれが導入された背景とか今まで積み重ねてきたものを理解しないとなかなか自分のやりたいことができないという辛みがある。書いてて思ったけどこれプログラミングに限らないな。
要はやっていくしかない。
そもそもの話 データ構造とアルゴリズム 再帰とかソートみたいな基本的なロジックから先にあるやつ（グラフ探索とか動的計画法とかなんとか優先探索とか）が全然分からない。
競技プログラミングの AtCoder を半年くらいやってみたけど Rating 324 で止まった（灰色）。これも勉強してプログラムをひたすら書いていくしかない。
どこに何を書くか 仕事のプログラムを書いていて、動くには動くんだけどこれここに書いていいんだっけ？という場面が無限にある。</description>
    </item>
    
    <item>
      <title>Hugo &#43; GitHub Pages でブログを作った話</title>
      <link>https://lyohe.github.io/post/2021-02-03-hugo-to-github-pages/</link>
      <pubDate>Wed, 03 Feb 2021 09:27:07 +0900</pubDate>
      
      <guid>https://lyohe.github.io/post/2021-02-03-hugo-to-github-pages/</guid>
      <description>このブログは Hugo + GitHub Pages で作った。
Hugo Hugo は Go 製の静的サイトジェネレータで、 Markdown 等で書いた文章から Web サイトを生成してくれる。 生成した Web サイトの中身はただの静的なファイルなので、 Netlify や GitHub Pages その他さまざまなサービスで Hosting できる。
Hugo には様々なテーマが用意されていて、見た目を簡単にカスタマイズできる。このブログでは Tania というテーマを利用している。テーマの適用は非常にかんたんで、 Hugo のプロジェクト内の themes ディレクトリにテーマをダウンロード（多くは GitHub で提供されてるので普通に clone してくればよい）し、設定ファイルで使用するテーマを指定するだけでよい。
Hugo の仕組みや設定ファイルの書き方についてはさくらインターネットさんが公開している記事が分かりやすかったので、これを読んでから公式ドキュメントを読めば大抵のことは分かると思う。
 【さくらのナレッジ】静的サイトジェネレータ「Hugo」と技術文書公開向けテーマ「Docsy」でOSSサイトを作る  ちなみに上記のサイトでは設定ファイルとして config.toml を使っているが、 TOML だけでなく YAML も設定ファイルとして使うことができる。
GitHub Pages に deploy するまで GitHub Pages を始めるのは非常に簡単で、ここに書いてある通りにやるだけでよい。
https://pages.github.com/
リポジトリを作ったら hugo new post/ファイル名 で新しくファイルを作り、 Markdown 等でコンテンツを書く。テーマによって書き方が異なるケースがあるので、テーマごとの Demo サイトと自分のサイトを見比べたり hugo server でローカルで動かしてチェックするのがよい。</description>
    </item>
    
    <item>
      <title>ブログを作りました</title>
      <link>https://lyohe.github.io/post/2021-02-02-introduction/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lyohe.github.io/post/2021-02-02-introduction/</guid>
      <description>はじめまして。
GitHub Pages + Hugo でブログを作ってみました。
GitHub アカウント名は lyohe です。これは私の本名が「りょうへい（Ryohei）」なんですが、むかし少しだけ一緒に仕事したポルトガル人の同僚に物凄い巻き舌で「お前の名前『ッりょへ』っていうのか。すごく呼びづらいな！（意訳）」って言われて R じゃなくて L なのかなと思ってつけました。その結果、より発音しづらくなったっぽいです。
自分の名前に identity を感じないため Web サービスの ID はそのときの気分で決めています（Twitter: @rtsudar）が、アイコンにはいつも同じ写真を使うようにしています。この写真はトルクメニスタンの国会記事堂付近の地面に映った自分の影です。観光で行ったら夕方で影が長く伸びてたのが気に入って撮りました。議事堂の写真を撮るのは忘れました。
このブログにはプログラミングの話を書こうと考えています。とはいえ、私はプログラミングに関しては素人同然で数学や情報科学の素養もなく31歳未経験でプログラマーに転職したので、技術的に面白いと思ってもらえるような話が書けるかは分かりません。しかし、学んだことや新しく知ったことを整理して書くことは必ず自分の理解の促進に繋がると考えています。つまり自分のためでもあります。
元々は10年ほど経理の仕事をしていましたが、様々な仕事に触れる中で将来的に会計税務に関連する仕事でもプログラミングが重要になりそうだな〜と思って転職しました。
好きなことは読書で、嫌いなことは労働です。
これからよろしくお願いします。</description>
    </item>
    
  </channel>
</rss>
